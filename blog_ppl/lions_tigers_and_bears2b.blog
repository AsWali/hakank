/*
   From Allen Downey
   https://twitter.com/AllenDowney/status/1063460117029535746
   """
   Today's Bayesian problem of the week: Suppose we visit a wild animal preserve where we 
   know that the only animals are lions and tigers and bears, but we don't know how 
   many of each there are.

   During the tour, we see 3 lions, 2 tigers, and 1 bear. Assuming that every animal had an equal 
   chance to appear in our sample, estimate the prevalence of each species. 
 
   What is the probability that the next animal we see is a bear?
   """

   Also see: https://towardsdatascience.com/estimating-probabilities-with-bayesian-modeling-in-python-7144be007815


*/

// The animals.
// Here we have to use Integer since BLOG don't support hierarchical types, i.e.
// type Animal;
// type Animal Lion;
// type Animal Tiger;
// type Animal Bear;
fixed Integer lion = 0;
fixed Integer tiger = 1;
fixed Integer bear = 2;

// The probabilities to calculate ("aliased" for simplicity)
random Real probLion  ~ x[0];
random Real probTiger ~ x[1];
random Real probBear  ~ x[2];

// Prior
// The Dirichlet distribution ensures that the sum of probabilities is 1
// i.e. we don't have to ensure this via some specific constraint.
fixed RealMatrix vector = [3; 2; 1];
random RealMatrix x ~ Dirichlet(vector);

// Posterior: What is the probability of lion, tiger, and bear given the observations?
random Integer o(Integer i) ~ Categorical({lion -> probLion, tiger -> probTiger, bear->probBear});


// Observations
obs o(0) = lion;
obs o(1) = lion;
obs o(2) = lion;
obs o(3) = tiger;
obs o(4) = tiger;
obs o(5) = bear;

/*
query 0.01*round(probLion*100.0);
query 0.01*round(probTiger*100.0);
query 0.01*round(probBear*100.0);
*/
query probLion;
query probTiger;
query probBear;

// What is the probability that the next animal seen is a ...?
query o(6) == lion;  // 0.5072137068579778
query o(6) == tiger; // 0.3309713938200941
query o(6) == bear;  // 0.16181489994321638

/*
Distribution of values for (probLion > probTiger)
        true    0.7433872454911994
        false   0.2566127545087936
Distribution of values for (probLion > probBear)
        true    0.9393295165343472
        false   0.06067048346565189
Distribution of values for (probTiger > probBear)
        true    0.8113525572106671
        false   0.18864744278933007
*/
/*
query probLion > probTiger;
query probLion > probBear;
query probTiger > probBear;
*/