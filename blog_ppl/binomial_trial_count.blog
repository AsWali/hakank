/*
  Binomial Trial Count.

   From infer.net test/Tests/BlogTests.cs
   """
   // Example of inferring the size of a population.
   // Reference: A. Raftery, "Inference for the binomial N parameter: A hierarchical Bayes approach", Biometrika 1988
   // http://pluto.huji.ac.il/~galelidan/52558/Material/Raftery.pdf

   ....
ExpectationPropagation
impala
  theta = Beta(80.24,91.17)[mean=0.4681]
  N mode = 44, median = 45
waterbuck
  theta = Beta(238,233.8)[mean=0.5044]
  N mode = 124, median = 125
impala
  N mode = 37, median = 65
waterbuck
  N mode = 122, median = 208

VariationalMessagePassing
impala
  theta = Beta(106,370.9)[mean=0.2223]
  N mode = 94, median = 94
waterbuck
  theta = Beta(316,393)[mean=0.4457]
  N mode = 141, median = 141
impala
  N mode = 37, median = 65
waterbuck
  N mode = 122, median = 208

   """

*/

fixed Integer maxN = 1000;

// random Boolean evidence ~ BooleanDistrib(0.5);
random Real theta ~ Beta(1,1);

random Boolean prob(Real r) ~ BooleanDistrib(r);
random Boolean nProb(Integer i) ~ if i == 0 then false else prob(1.0 / toReal(i));
// This is NOT what I want:
// It should be something like
//     Discrete({i -> 1/i for Integer i: i >= 0 & i <= maxN & nProb(i) == true }})
// but that don't work, of course...
random Integer N ~ UniformChoice({i for Integer i: i >= 0 & i <= maxN & nProb(i) == true });

random Integer x(Integer i) ~ Binomial(N, theta);

// Impala
obs x(0) = 15;
obs x(1) = 20;
obs x(2) = 21;
obs x(3) = 23;
obs x(4) = 26;


// Waterbuck
/*
obs x(0) = 53;
obs x(1) = 57;
obs x(2) = 66;
obs x(3) = 67;
obs x(4) = 72;
*/

query N;
query theta;