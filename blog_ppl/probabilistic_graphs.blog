/*
  Probabilistic graphs
  https://dtai.cs.kuleuven.be/problog/tutorial/basic/04_pgraph.html

*/

/*
0.6::edge(1,2).
0.1::edge(1,3).
0.4::edge(2,5).
0.3::edge(2,6).
0.3::edge(3,4).
0.8::edge(4,5).
0.2::edge(5,6).

path(X,Y) :- edge(X,Y).
path(X,Y) :- edge(X,Z),
             Y \== Z,
         path(Z,Y).

query(path(1,5)).
query(path(1,6)).
query(path(5,2)).
*/

/*
type Edge;
distinct Edge e1,e2,e3,e4,e5,e6;

random Boolean edge(Edge t1, Edge t2) ~
   case [t1,t2] in
    {
     [e1,e2] -> BooleanDistrib(0.6),
     [e1,e3] -> BooleanDistrib(0.1),
     [e2,e5] -> BooleanDistrib(0.4),
     [e2,e6] -> BooleanDistrib(0.3),
     [e3,e4] -> BooleanDistrib(0.3),
     [e4,e5] -> BooleanDistrib(0.8),
     [e5,e6] -> BooleanDistrib(0.2)
    };


random Boolean path(Edge t1, Edge t2) ~
     if edge(t1,t2) then true
     else
        if exists Edge t3 edge(t1,t3) & t3 != t2 & path(t3,t2) then true else  false;

query path(e1,e2);
query path(e1,e5);
query path(e1,e6);
query path(e5,e2);

*/


//
// Variant using Integers
//
fixed Integer numEdges = 6;

// Note: The graph is acyclic, and it works in BLOG
// When adding an edge (e.g. 6->1) which makes a cyclic graph, then BLOG complains...
random Boolean edge(Integer t1, Integer t2) ~
   case [t1,t2] in
    {
     [1,2] -> BooleanDistrib(0.6),
     [1,3] -> BooleanDistrib(0.1),
     [2,5] -> BooleanDistrib(0.4),
     [2,6] -> BooleanDistrib(0.3),
     [3,4] -> BooleanDistrib(0.3),
     [4,5] -> BooleanDistrib(0.8),
     [5,6] -> BooleanDistrib(0.2)
     // Test:
     // , [6,1] -> BooleanDistrib(0.8)

    };

random Boolean path(Integer t1, Integer t2) ~
     if edge(t1,t2) then true
     else
        if exists Integer t3 t3 >= 1 & t3 <= numEdges & edge(t1,t3) & t3 != t2 & path(t3,t2) then true else  false;

query path(1,2);
query path(1,5);
query path(1,6);
query path(5,2);
