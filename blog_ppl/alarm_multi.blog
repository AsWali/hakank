/*
   https://dtai.cs.kuleuven.be/problog/tutorial/basic/02_bayes.html
   """
   Since the random variables in the Bayesian network are all Boolean, we only need a single literal 
   in the head of the rules. We can extend the Bayesian network to have a multi-valued variable by 
   indicating the severity of the earthquake. The literal earthquake now has three possible values 
   none, mild, heavy instead of previously two (no or yes).
   """

*/


/*
person(john).
person(mary).

0.7::burglary.
0.01::earthquake(heavy); 0.19::earthquake(mild); 0.8::earthquake(none).

0.90::alarm :-   burglary, earthquake(heavy).
0.85::alarm :-   burglary, earthquake(mild).
0.80::alarm :-   burglary, earthquake(none).
0.10::alarm :- \+burglary, earthquake(mild).
0.30::alarm :- \+burglary, earthquake(heavy).

0.8::calls(X) :- alarm, person(X).
0.1::calls(X) :- \+alarm, person(X).

evidence(calls(john),true).
evidence(calls(mary),true).

query(burglary).
query(earthquake(_)).
*/


type Person;
distinct Person john, mary;

type Earthquake;
distinct Earthquake heavy, mild, none;


random Boolean burglary ~ BooleanDistrib(0.7);
random Earthquake earthquake ~ Categorical({heavy -> 0.01, mild -> 0.19, none -> 0.8});

random Boolean alarm ~
    case [burglary, earthquake] in
       {
           [true, heavy] -> BooleanDistrib(0.90),
           [true, mild] -> BooleanDistrib(0.85),
           [true, none] -> BooleanDistrib(0.80),
           [false, mild] -> BooleanDistrib(0.10),
           [false, heavy] -> BooleanDistrib(0.30)
       };

random Boolean calls(Person p) ~ if alarm then BooleanDistrib(0.8) else BooleanDistrib(0.01);

obs calls(john) = true;
obs calls(mary) = true;

query burglary;
query earthquake;