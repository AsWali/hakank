/*

  
  Number lock problem in MiniZinc.
  
  From Presh Talwalkar (MindYourDecisions) 
  """
  Puzzles like this have been shared with the dubious claim that "only a
  genius can solve" them. But they are still fun problems so let's work one
  out.

  A number lock requires a 3 digit code. Based on these hints, can you crack
  the code?

   682 - one number is correct and in the correct position
   645 - one number is correct but in the wrong position
   206 - two numbers are correct but in the wrong positions
   738 - nothing is correct
   780 - one number is correct but in the wrong position

  Video:  https://youtu.be/-etLb-8sHBc
  """

  """
  Fraction of consistent worlds (running avg, all trials): 0.0011
  ======== Query Results =========
  Number of samples: 10000
  Distribution of values for {i, x(i) for Integer i : ((i >= 0) & (i < n))}
        [[0, 0], [2, 2], [1, 5]]   1.0
  ======== Done ========
  """

  I.e. [0,5,2]

  Nice!

  This BLOG model use the same approach as
  - MiniZinc model: http://hakank.org/minizinc/number_lock.mzn
  - Picat model: http://hakank.org/picat/number_lock.pi

  A different - and more general - approach is in ./number_lock2.blog.

*/

fixed Integer n = 3; // number of columns
fixed Integer m = 5; // number of rows (i.e. number of hints)

random Integer y(Integer r, Integer i) ~ UniformInt(0,9); // The data
random Integer x(Integer i) ~ UniformInt(0,9); // The unknown

// Number of digits that's in a correct position (and correct value)
random Integer num_correct_positions(Integer r)  ~
    toInt(sum({1 for Integer i: i >= 0 & i < n & y(r,i) == x(i)}));

// Number of digits that has correct value (wether in correct position or not)
random Integer num_correct_values(Integer r) ~
    toInt(sum({1 for Integer i, Integer j: i >= 0 & i < n & j >= 0 & j < n & y(r,j) == x(i)}));

// 682 - one number is correct and in the correct position
obs y(0,0) = 6;
obs y(0,1) = 8;
obs y(0,2) = 2;
obs num_correct_positions(0) = 1;
obs num_correct_values(0) = 1;

// 645 - one number is correct but in the wrong position
obs y(1,0) = 6;
obs y(1,1) = 4;
obs y(1,2) = 5;
obs num_correct_positions(1) = 0;
obs num_correct_values(1) = 1;

// 206 - two numbers are correct but in the wrong positions
obs y(2,0) = 2;
obs y(2,1) = 0;
obs y(2,2) = 6;
obs num_correct_positions(2) = 0;
obs num_correct_values(2) = 2;

// 738 - nothing is correct
obs y(3,0) = 7;
obs y(3,1) = 3;
obs y(3,2) = 8;
obs num_correct_positions(3) = 0;
obs num_correct_values(3) = 0;

// 780 - one number is correct but in the wrong position
obs y(4,0) = 7;
obs y(4,1) = 8;
obs y(4,2) = 0;
obs num_correct_positions(4) = 0;
obs num_correct_values(4) = 1;

// What the number?
// query {i,x(i) for Integer i: i>= 0 & i < n};
query {x(i) for Integer i: i>= 0 & i < n};