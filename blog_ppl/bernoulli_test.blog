/*
  Test of Bernoulli

*/

// How do I generate an array of random variables which would then be analysed?
// Type Data;
// distinct Data x[10];

// distinct Integer y[20];

// fixed Real trueProb = 0.7;

Random Real prob ~ Beta(4,4);

// Random Integer[] x(Integer i) ~ Bernoulli(trueProb);
Random Integer y(Integer i) ~ Bernoulli(prob);

// Random Boolean draw(Integer i) ~ Bernoulli(trueProb);

// Ah, one have to reverse the logic: There must be no integer where x(j) != y(j)
// However, this works just for very small arrays, e.g. 4. Larger arrays yield only impossible worlds...
// Random Boolean fillx ~ if !exists Integer j j >= 0 & j <= 10 & y(j) != x(j)  then true else false;

query prob;


// R:
// rbinom(20,1,0.3)
/// fixed Integer[] y = [0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,1,1]; // Don't work!

// 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 1 1 0 1 1 0 1 0 1 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 1 1 0 1 0 1 0 0 1 1 0 0 0 1 0 1 0 0 0 0 0 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 1 1 0 0 1 0 1 1 0 0 1 0 0 1 0 1 1 0 1 0 1 0 0 0 0 0 1 0 0

// obs y(0) = 0;
// obs y(1) = 0;
// obs y(2) = 0;
// obs y(3) = 0;
// obs y(4) = 0;
// obs y(5) = 0;
// obs y(6) = 0;
// obs y(7) = 1;
// obs y(8) = 1;
// obs y(9) = 0;
// obs y(10) = 0;
// obs y(11) = 0;
// obs y(12) = 0;
// obs y(13) = 0;
// obs y(14) = 0;
// obs y(15) = 0;
// obs y(16) = 1;
// obs y(17) = 0;
// obs y(18) = 0;
// obs y(19) = 1;
// obs y(20) = 1;

// obs fillx = true;

// query x(0);
// query x(1);
// query x[2];
// query x[3];
// query x[4];
// query x[5];
// query x[6];

// query y(0);
// query y(1);


// rbinom(120,1,0.3)
obs y(0) = 0;
obs y(1) = 0;
obs y(2) = 1;
obs y(3) = 0;
obs y(4) = 0;
obs y(5) = 0;
obs y(6) = 0;
obs y(7) = 0;
obs y(8) = 0;
obs y(9) = 0;
obs y(10) = 1;
obs y(11) = 0;
obs y(12) = 0;
obs y(13) = 0;
obs y(14) = 0;
obs y(15) = 1;
obs y(16) = 0;
obs y(17) = 0;
obs y(18) = 0;
obs y(19) = 0;
obs y(20) = 1;
obs y(21) = 0;
obs y(22) = 0;
obs y(23) = 0;
obs y(24) = 0;
obs y(25) = 0;
obs y(26) = 0;
obs y(27) = 0;
obs y(28) = 1;
obs y(29) = 1;
obs y(30) = 0;
obs y(31) = 1;
obs y(32) = 1;
obs y(33) = 0;
obs y(34) = 1;
obs y(35) = 0;
obs y(36) = 1;
obs y(37) = 0;
obs y(38) = 0;
obs y(39) = 0;
obs y(40) = 0;
obs y(41) = 1;
obs y(42) = 0;
obs y(43) = 0;
obs y(44) = 0;
obs y(45) = 1;
obs y(46) = 0;
obs y(47) = 1;
obs y(48) = 0;
obs y(49) = 0;
obs y(50) = 0;
obs y(51) = 0;
obs y(52) = 0;
obs y(53) = 1;
obs y(54) = 1;
obs y(55) = 0;
obs y(56) = 1;
obs y(57) = 0;
obs y(58) = 1;
obs y(59) = 0;
obs y(60) = 0;
obs y(61) = 1;
obs y(62) = 1;
obs y(63) = 0;
obs y(64) = 0;
obs y(65) = 0;
obs y(66) = 1;
obs y(67) = 0;
obs y(68) = 1;
obs y(69) = 0;
obs y(70) = 0;
obs y(71) = 0;
obs y(72) = 0;
obs y(73) = 0;
obs y(74) = 1;
obs y(75) = 0;
obs y(76) = 0;
obs y(77) = 1;
obs y(78) = 0;
obs y(79) = 1;
obs y(80) = 0;
obs y(81) = 0;
obs y(82) = 0;
obs y(83) = 0;
obs y(84) = 0;
obs y(85) = 0;
obs y(86) = 0;
obs y(87) = 0;
obs y(88) = 0;
obs y(89) = 1;
obs y(90) = 0;
obs y(91) = 1;
obs y(92) = 1;
obs y(93) = 0;
obs y(94) = 0;
obs y(95) = 1;
obs y(96) = 0;
obs y(97) = 1;
obs y(98) = 1;
obs y(99) = 0;
obs y(100) = 0;
obs y(101) = 1;
obs y(102) = 0;
obs y(103) = 0;
obs y(104) = 1;
obs y(105) = 0;
obs y(106) = 1;
obs y(107) = 1;
obs y(108) = 0;
obs y(109) = 1;
obs y(110) = 0;
obs y(111) = 1;
obs y(112) = 0;
obs y(113) = 0;
obs y(114) = 0;
obs y(115) = 0;
obs y(116) = 0;
obs y(117) = 1;
obs y(118) = 0;
obs y(119) = 0;
