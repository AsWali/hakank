/*
  https://edu.swi-prolog.org/mod/assign/view.php?id=254&forceview=1
  """
  Coin tosses

  http://cplint.eu/p/coin_tosses.swinb

  Coin tosses

  Consider a process where you repeatedly toss coins and record the results.

  After each toss, you continue tossing with probability 0.8.

  Write a predicate tosses(Coin,L) that, given an initial coin id Coin, returns in L the list of
  results of coin tosses obtained using the process above.

  Moreover, write a predicate length_tosses(N) that returns the number of coin tosses.

  Compute the probability of the sequence [h,h,h] using MCINTYRE.

  Compute the probability of the sequence [h,h,h,h,h] given that the subsequence [h,h,h] was observed
  using rejection sampling and Metropolis Hastings.

  Compute the probability of the sequences of 10 coin tosses using MCINTYRE.

  Compute the expected length of the sequences of coin tosses using MCINTYRE.
  """ 

  Note: The cplint version (corrected by  Fabrizio Riguzzi) at http://cplint.eu/p/coin_tosses_hakank_rzf.swinb
  give another solutions:
   - first problem: probability of the sequence [h,h,h] -> 0.015
   - second problem: probability of the sequence [h,h,h,h,h] given that the subsequence [h,h,h] -> about 0.03
   - third problem: probability of the sequences of 10 coin tosses -> about 0.026
   - fourth problem: expected length of the sequences of coin tosses -> about 4.

This is not at all the same as this BLOG model.
  

*/

type Coin;
distinct Coin head, tail, nothrow;

// Should we continue to toss?
random Boolean do_toss(Integer t) ~
       if t == 0 then true else BooleanDistrib(0.8);
       // BooleanDistrib(0.8);

random Coin toss(Integer t) ~
           if t == 0 then Categorical({head -> 0.5, tail -> 0.5}) 
           else
           if !exists Integer i i > 0 & i <= t & !do_toss(i) then Categorical({head -> 0.5, tail -> 0.5})
           // else nothrow
           ;

obs toss(0) = head;
obs toss(1) = head;
obs toss(2) = head;
// obs toss(3) = head;
// obs toss(4) = head;
// obs toss(5) = head;
// obs toss(6) = head;
// obs toss(7) = head;

query toss(3) == head & toss(4) == head;
query toss(0);
query toss(1);
query toss(2);
query toss(3);
query toss(4);
query toss(5);
query toss(6);

/*
Distribution of values for size({t for Integer t : (((t >= 0) & (t < 10)) & !(toss(t) = null))})
        1       0.20290000000000413
        2       0.1598000000000027
        3       0.136800000000003
        4       0.09880000000000101
        5       0.08020000000000073
        6       0.06470000000000042
        7       0.054100000000000266
        8       0.03720000000000015
        9       0.0314000000000001
        10      0.13410000000000272
*/
/*
It's a pity that BLOG don't support Avergate({...}) anymore!
The "external" mean of the values*probabilities:is about 4.9
VARIABLE size({t for Integer t : (((t >= 0) & (t < 20)) & !(toss(t) = null))})
Mean: 4.89940000000005
*/
query size({t for Integer t: t>= 0 & t < 20 & toss(t) != null});

// This BLOG model give
// Distribution of values for !(toss(9) = null)
//        false   0.8661499999999379
//        true    0.13384999999999034
// Which seems to be correct: 0.8^9 = 0.134217728
query toss(9) != null; 
