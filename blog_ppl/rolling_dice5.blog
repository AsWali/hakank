/*
  https://dtai.cs.kuleuven.be/problog/tutorial/basic/03_dice.html
  """
  The following example illustrates the use of a logic program with recursion and lists. 
  We start by rolling the first die. Every roll determines the next die to roll, but we stop 
  if we have used that die before. We query for the possible sequences of rolled dice. 
  We use three-sided dice instead of the regular six-sided ones simply to restrict the number 
  of possible outcomes (and thus inference time). 
  """

  
*/


/*
1/3::dice(1,D); 1/3::dice(2,D); 1/3::dice(3,D) :- die(D).
die(X) :- between(1,3,X).

roll(L) :-
   next(1,[1],L).

next(N,Seen,Rev) :-
   dice(Now,N),
   member(Now,Seen),
   reverse(Seen,[],Rev).
next(N,Seen,List) :-
   dice(Now,N),
   \+ member(Now,Seen),
   next(Now,[Now|Seen],List).

member(X,[X|_]).
member(X,[_|Z]) :-
   member(X,Z).

reverse([],L,L).
reverse([H|T],A,L) :-
   reverse(T,[H|A],L).

query(roll(_)).


*/

// BLOG is fast: for 1..16 it takes 2.4s (with 10000 LW-samples)
fixed Integer maxDie = 4;

random Integer roll(Integer t) ~ UniformInt(1, maxDie);

random Integer dice(Integer t) ~
   // We always throws the first die
   if t == 0 then roll(0)
   // And then continue until we get a double.
   else if !exists Integer i i >= 0 & i < t & roll(i) != null & roll(i) == roll(t) then roll(t);

// In the example, the first roll is 1.
obs roll(0) = 1;

// The order of the sequence matters: [1,2,3] != [2,3,1]
// This don't preserve the order
// query {dice(i) for Integer i: i >= 0 & i < maxDie & !exists Integer j j <= i & dice(j) == null };


// This is ugly but preserved the order of the rolls...
// (though the presentation, i.e. the i's is not in order)
// 
// Distribution of values for {i, dice(i) for Integer i : (((i >= 0) & (i < maxDie)) & !exists Integer j (((j <= i) & (dice(j) = null))))}
//         [[0, 2]]        0.11177999999998993
//         [[0, 3]]        0.11165999999999002
//         [[0, 1]]        0.10807999999998985
//         [[0, 2], [1, 3]]        0.07650999999999343
//         [[0, 1], [1, 2]]        0.07589999999999343
//         [[1, 1], [0, 3]]        0.0746899999999927
//         [[1, 1], [0, 2]]        0.07404999999999258
//         [[1, 2], [0, 3]]        0.07363999999999277
//         [[0, 1], [1, 3]]        0.07320999999999278
//         [[2, 2], [0, 1], [1, 3]]        0.03711999999999747
//         [[2, 1], [1, 2], [0, 3]]        0.03704999999999749
//         [[1, 1], [2, 3], [0, 2]]        0.036819999999997424
//         [[2, 1], [0, 2], [1, 3]]        0.03678999999999743
//         [[0, 1], [1, 2], [2, 3]]        0.036579999999997344
//         [[1, 1], [2, 2], [0, 3]]        0.0361199999999974
query {i,dice(i) for Integer i: i >= 0 & i < maxDie & !exists Integer j j <= i & dice(j) == null };

