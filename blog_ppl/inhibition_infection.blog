/*
   https://dtai.cs.kuleuven.be/problog/tutorial/basic/10_inhibitioneffects.html
   """
   Example 2: Social Network

   An infectious disease spreads through a population as follows: when- ever two people are in regular 
   contact with each other and one is infected, there is a probability of 0.6 of the infection spreading 
   also to the other person. Given a set of initially infected people and a graph of connections between 
   individuals in the population, the goal is to predict the spread of the disease.
   """

*/


/*
% ProbLog
person(a).
person(b).

0.1::initialInf(X) :- person(X).
0.1::contact(X,Y) :- person(X), person(Y).

inf(X)      :- initialInf(X).
0.6::inf(X) :- contact(X, Y), inf(Y).

query(inf(_)). % inf(a): 0.1054 inf(b): 0.1054

*/


type Person;
// distinct Person a, b; // original inf(a,0) ~ 0.105
// distinct Person a, b, c, d; // more people! inf(a,0) ~ 0.1176 (ProbLog takes long time with more than 4 persons)
distinct Person a, b, c, d, ee, f, g, h, i, j, k; // more people! inf(a,0) ~ 0.1813. Takes about 17s for n=100000

random Boolean initialInf(Person x) ~ BooleanDistrib(0.1);
random Boolean contact(Person x, Person y) ~ if x == y then false else BooleanDistrib(0.1);

random Boolean inf(Person p, Integer t) ~
   if initialInf(p) then true
   // "Encountered cycle in context-specific dependency graph."
   // (It works sometimes with very small n ~ 20 or so...
   // else if exists Person q p != q & contact(p, q) & inf(q, 1+t) then BooleanDistrib(0.6);   
   // OK: This is a hack, but it seems to work. We just accept 10 recursions. 
   else if t < 10 & exists Person q p != q & contact(p, q) & inf(q, 1+t) then BooleanDistrib(0.6);


query inf(a,0);
query inf(b,0);