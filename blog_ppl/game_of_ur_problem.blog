/*
   https://www.allendowney.com/blog/2018/10/21/the-game-of-ur-problem/
   """
   Here’s a probability puzzle to ruin your week.

   In the Royal Game of Ur, players advance tokens along a track with 14 spaces. 
   To determine how many spaces to advance, a player rolls 4 dice with 4 sides. Two corners 
   on each die are marked; the other two are not. The total number of marked corners — 
   which is 0, 1, 2, 3, or 4 — is the number of spaces to advance.

   For example, if the total on your first roll is 2, you could advance a token to space 2. 
   If you roll a 3 on the next roll, you could advance the same token to space 5.

   Suppose you have a token on space 13. How many rolls did it take to get there?
   """

   See:
   https://www.allendowney.com/blog/lions-and-tigers-and-bears/

   Allen Downey's solution:
   http://nbviewer.jupyter.org/github/AllenDowney/ThinkBayes2/blob/master/solutions/game_of_ur_soln.ipynb?flush=true


   Fraction of consistent worlds (running avg, all trials): 0.0268
   Number of samples: 10000
   Distribution of values for size({r for Roll r : true})
        4       0.15363881401617324
        5       0.342318059299192   <-
        6       0.25876010781671277
        7       0.15094339622641584
        8       0.0727762803234505
        9       0.013477088948787137
        10      0.008086253369272284

   Fraction of consistent worlds (running avg, all trials): 0.02815
   Number of samples: 100000
   Distribution of values for size({r for Roll r : true})
        4       0.05302226935312762
        5       0.17532697066100844
        6       0.2248144220572614   <-
        7       0.20890774125132291
        8       0.14209968186638194
        9       0.09720749381406728
        10      0.051254860374690035
        11      0.027925061859313937
        12      0.011664899257688115
        13      0.006009190526687815
        14      0.0014139271827500754
        15      3.534817956875188E-4


*/

/*
// At last a problem where I use number statements! :-)
type Roll;
#Roll ~ UniformInt(3,20);
// #Roll ~ Poisson(5);

random Integer roll(Roll r) ~ UniformInt(0,4);

obs sum({roll(r) for Roll r}) = 13.0;

query size({r for Roll r});
// query sum({r for Roll r});
// query ({roll(r) for Roll r}); // The individual rolls
*/


/*
 Alternative approach using plain Integers:
 
 Fraction of consistent worlds (running avg, all trials): 0.0286
 Number of samples: 100000
 Distribution of values for numRolls
        4       0.06474820143884806
        5       0.16223021582733602
        6       0.22266187050359418   <-
        7       0.21187050359711962
        8       0.1507194244604296
        9       0.08956834532373995
        10      0.04712230215827273
        11      0.030215827338129164
        12      0.011510791366906357
        13      0.00503597122302153
        14      0.0017985611510791192
        15      0.0017985611510791192
        16      3.597122302158238E-4
        17      3.597122302158238E-4

*/


random Integer numRolls ~ UniformInt(3,20);
random Integer roll(Integer i) ~ UniformInt(0,4);

random Real sumRoll ~ sum({roll(i) for Integer i: i>= 0 & i < numRolls});

obs sumRoll = 13.0;
query numRolls;

// query {roll(i) for Integer i: i>= 0 & i < numRolls};
