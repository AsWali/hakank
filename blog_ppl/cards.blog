/*
  Second assignment of the CPLINT course:
  https://edu.swi-prolog.org/mod/assign/view.php?id=243
  """
  http://cplint.eu/p/cards.swinb
  Cards

  Suppose you have two decks of poker cards (52 cards, 4 suits, 13 ranks: A, K, Q, J, 10, 9, 8, 7, 6, 5, 4, 3, 2).

  Suppose you draw a card from the first deck and one from the second.

  Write a program to compute the probability that in this way you obtain one pair (two cards of the same rank).

  Can you do it with a single probabilistic clause?

  Add code to compute the probability that you draw at least one ace.
  """

"""
========  LW Trial Stats =========
Log of average likelihood weight (this trial): 1.2079226507921703E-13
Average likelihood weight (this trial): 1.0000000000001208
Fraction of consistent worlds (this trial): 1.0
Fraction of consistent worlds (running avg, all trials): 1.0
======== Query Results =========
Number of samples: 1000000
Distribution of values for (rank(card[0]) = rank(card[1]))
        false   0.9231910000001403
        true    0.07680899999999422
Distribution of values for (size({c for Card c : (rank(c) = ace)}) > 0)
        false   0.8521350000000993
        true    0.14786499999999828
Distribution of values for (size({c for Card c : (rank(c) = ace)}) = 1)
        false   0.858032000000077
        true    0.14196799999998852
Distribution of values for (size({c for Card c : (rank(c) = ace)}) = 2)
        false   0.9941030000000336
        true    0.005896999999999362
======== Done ========

"""

*/

type Suit;
distinct Suit hearts, spades, clubs, diamonds;

type Rank;
distinct Rank ace, king, queen, jack, v10, v9, v8, v7, v6, v5, v4, v3, v2;

// Note that what we have is two cards drawn from different decks!
type Card;
distinct Card card[2];

Random Suit suit(Card c) ~ UniformChoice({s for Suit s});
Random Rank rank(Card c) ~ UniformChoice({r for Rank r});

// Probability of a pair
query rank(card[0]) == rank(card[1]);

// At least an ace
query size({c for Card c: rank(c) == ace}) >  0;

// Exactly one ace
query size({c for Card c: rank(c) == ace}) == 1;

// Two aces
query size({c for Card c: rank(c) == ace}) == 2;

// A King or a Queen in spades
// query size({c for Card c: rank(c) == king & suit(c) == spades}) > 0;
query (rank(card[0]) == king | rank(card[1]) == king) & (suit(card[0]) == spades | suit(card[1]) == spades) ;

// query suit(card[0]);
// query rank(card[0]);
// query suit(card[1]);
// query rank(card[1]);
   
