/*
   Locomotive problem.

   From Think Bayes, page 22ff
   """
   I found the locomotive problem in Frederick Mosteller?s, Fifty Challenging
   Problems in Probability with Solutions (Dover, 1987):
      'A railroad numbers its locomotives in order 1..N. One day you
       see a locomotive with the number 60. Estimate how many loco-
       motives the railroad has.'
   """

   Cf german_tank.blog and german_tank_int.blog

   I'm not happy about this solution. It's too much trickeries and fixes.

*/

/*

// Note: This is NOT what the Think Bayes model does. It's just a Uniform of N..maxInt.
//       The probability of locomotive number n (>= N) is 1/n not 1/N!
fixed Integer maxInt = 101;
fixed Integer seenLocomotive = 4;

random Integer N ~
  UniformInt(max({locomotive(i) for Integer i: i >= 1 & i <= seenLocomotive}),maxInt);

random Integer locomotive(Integer t) ~
       UniformChoice({i for Integer i: i >= 1 & i <= maxInt});

// Don't forget to change seenLocomotive!
obs locomotive(1) = 60;
obs locomotive(2) = 72;
obs locomotive(3) = 12;
obs locomotive(4) = 60;

query locomotive(1);
query N;
*/

fixed Integer maxInt = 101; // If this is changed, then the prior file be regenerated!

// Read the priors from a file.
// Generated by gen_locomotive.pl ('for (1..101) { print 1/$_  . "\n"}')
fixed RealMatrix priors = loadRealMatrix("gen_locomotive.txt");

// This works, kinda. It give a huge probability of <null>, though...
// Generate a "proposal" of N
// This should be possible to do in BLOG!
random Integer N1 ~  Discrete(priors); 

// Check if the proposal is larger than the observed locomotive,
// if so, accept the proposal. If not -> null (which is filtered out below).
random Integer N ~ if N1 >= locomotive then N1;

random Integer locomotive ~ UniformInt(1,maxInt);

obs locomotive = 60;
// Filter out null values of N. Not pretty...
obs N != null = true;

// Fraction of consistent worlds (running avg, all trials): 0.0965 !
query locomotive;
query N;

