/*
   Ruin problem.

*/


type Coin;
distinct Coin head, tail, neither;

fixed Integer start = 10;
fixed Integer win = 1;
fixed Integer loose = 1;

// Draw a coin at timestep t:
// Don't draw if ruined.
random Coin draw(Timestep t) ~
   if t > @0 & ruin(t-1) then null else UniformChoice({c for Coin c});

// What is the score at time t?
// After ruin there's no way back at the game again.
random Integer amount(Timestep t) ~
   if t == @0 then start
   else if amount(t-1) == 0 then 0
   else if draw(t) == head then amount(t-1) + win
   else
     if amount(t-1) < loose then 0 else amount(t-1) - loose;

// Is the player busted at time t?
// This is the first time the player bused
random Boolean ruin(Timestep t) ~ if amount(t) == 0 then true else false;

// Was time t the first time the played got 0 (i.e. busted)?
random Boolean ruined_first_time(Timestep t) ~
   if ruin(t) & !exists Timestep s s > @0 & s < t & amount(s) == 0
   then true else false;

// Was time t the first time the Player got double points?
random Boolean doubled_first_time(Timestep t) ~
   if amount(t) >= 2*start & !exists Timestep s s > @0 & s < t & amount(s) >= 2*start
   then true else false;

// obs ruin(@15) = true; // Player busted at time t. How was the game before?
// obs amount(@20) = 26;

/*
query amount(@0);
query amount(@1);
query amount(@2);
query amount(@3);
query amount(@4);
query amount(@5);
query amount(@6);
query amount(@7);
query amount(@8);
query amount(@9);
*/

query amount(@10);
query amount(@11);
query amount(@12);
query amount(@13);
query amount(@14);
query amount(@15);
query amount(@16);
query amount(@17);
query amount(@18);
query amount(@19);
query amount(@20);

query amount(@50);
query ruin(@50);

// Distribution of the first time the player was ruined.
// query {t for Timestep t: t > @0 & t < @30 & ruined_first_time(t)};

// Distribution of the first time the player doubled the money.
// query {t for Timestep t: t > @0 & t < @30 & doubled_first_time(t)};
