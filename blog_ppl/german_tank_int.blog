/*
  German tank problem

  See ~/stan/german_tank.py
"""
       mean se_mean     sd   2.5%    25%    50%    75%  97.5%  n_eff   Rhat
N    383.59    0.51  209.4 258.08 281.56 322.26 406.32  875.1 165440    1.0
lp__ -19.47  2.6e-3   0.82 -21.81 -19.67 -19.16 -18.95 -18.89  97227    1.0
"""


   Output from this BLOG model
"""
========  LW Trial Stats =========
Log of average likelihood weight (this trial): -24.799244948305628
Average likelihood weight (this trial): 1.697558554877323E-11
Fraction of consistent worlds (this trial): 1.0
Fraction of consistent worlds (running avg, all trials): 1.0
======== Query Results =========
Number of samples: 100
Distribution of values for (N > 250)
        true    1.0
Distribution of values for (N > 275)
        true    0.7704690699113238
        false   0.22953093008868572
Distribution of values for (N > 300)
        true    0.5876225148102006
        false   0.4123774851898138
Distribution of values for (N > 325)
        false   0.606400502028558
        true    0.3935994979714555
Distribution of values for (N > 350)
        false   0.6957809875606185
        true    0.30421901243939525
Distribution of values for (N > 375)
        false   0.7594454299303185
        true    0.24055457006969994
Distribution of values for (N > 400)
        false   0.7831598882674357
        true    0.21684011173257525
Distribution of values for (N > 425)
        false   0.8013867462637834
        true    0.19861325373622904
Distribution of values for (N > 450)
        false   0.8364986085063335
        true    0.16350139149367604
Distribution of values for (N > 475)
        false   0.862951894768683
        true    0.13704810523133162
======== Done ========
"""

  It seems that the 50/50 break is about 300..325.
  Note that the listing switch from true/false to false/true
  (the output is ordered by probabilities).
  

*/

// Tank id observed:  y = [10,256,202,97,12,53,123]
// Tank id observed:  y = [10,256,202,97]
// How many tanks are there?

Random Integer max_y ~ max({y(i) for Integer i: i>=0 & i<= 3});

random Real N ~ UniformInt(max_y,1000);
// random Real mean_val ~ Gaussian(6,6);

random Integer y(Integer t) ~ UniformInt(0,N);


obs y(0) = 10;
obs y(1) = 256;
obs y(2) = 202;
obs y(3) = 97;
// obs y(4) = 12;
// obs y(5) = 53;
// obs y(6) = 123;


// random Integer y(Timestep t) ~ UniformInt(0,N); // This works as well
// obs y(@0) = 10; // Using Timestep
// obs y(@1) = 256;
// obs y(@2) = 202;
// obs y(@3) = 97;

// query mean_val;
query N;

// query N > 250;
// query N > 275;
// query N > 300;
// query N > 325;
// query N > 350;
// query N > 375;
// query N > 400;
// query N > 425;
// query N > 450;
// query N > 475;
