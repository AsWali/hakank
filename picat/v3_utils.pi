/* 

  Utilities for Picat v3.

  Here are some utilities for Picat version3.
  - maplist/2, maplist/3, maplist/4, maplist/5
  - same_length/2
  - append/2 (appending list of lists
  - phrase/2

  This Picat model was created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/

module v3_utils.

import util.
% import cp.

%
% maplist/2, maplist/3, maplist/4, maplist/5.
%


%
% maplist(Goal, List).
% True if Goal can successfully be applied on all elements of List.
%
% maplist(Goal, List1, List2)
% As maplist/2 on two elements from two lists

% maplist(Goal, List1, List2, List3)
% As maplist/2 on three elements from three lists

% maplist(Goal, List1, List2, List3, List4)
% As maplist/2 on four elements from four lists
%
% maplist(Goal, List1, List2, List3, List4, List5)
% As maplist/2 on five elements from five lists
%
%
maplist(Goal, List) :-
    maplist_(List, Goal).

maplist(Goal, List1, List2) :-
    maplist_(List1, List2, Goal).

maplist(Goal, List1, List2, List3) :-
    maplist_(List1, List2, List3, Goal).

maplist(Goal, List1, List2, List3, List4) :-
    maplist_(List1, List2, List3, List4, Goal).

maplist(Goal, List1, List2, List3, List4, List5) :-
    maplist_(List1, List2, List3, List4, List5, Goal).

%%
%% Helper predicates
%%
maplist_([], _) :- true.
maplist_([Elem|Tail], Goal) :-
    call(Goal, Elem),
    maplist_(Tail, Goal).

maplist_([], X, _) :- X = []. 
maplist_([Elem1|Tail1],
         [Elem2|Tail2],
         Goal) :-
    call(Goal, Elem1, Elem2),
    maplist_(Tail1, Tail2, Goal).

maplist_([], X, Y, _) :-
   X = [], Y = [].
maplist_([Elem1|Tail1],
         [Elem2|Tail2],
         [Elem3|Tail3],
         Goal) :-
    call(Goal, Elem1, Elem2, Elem3),
    maplist_(Tail1, Tail2, Tail3, Goal).

maplist_([], X, Y, Z, _) :-
    X = [], Y = [], Z = [].
maplist_([Elem1|Tail1],
         [Elem2|Tail2],
         [Elem3|Tail3],
         [Elem4|Tail4],
         Goal) :-
    call(Goal, Elem1, Elem2, Elem3, Elem4),
    maplist_(Tail1, Tail2, Tail3, Tail4, Goal).

maplist_([], X, Y, Z, A, _) :-
    X = [], Y = [], Z = [], A = [].
maplist_([Elem1|Tail1],
         [Elem2|Tail2],
         [Elem3|Tail3],
         [Elem4|Tail4],
         [Elem5|Tail5],         
         Goal) :-
    call(Goal, Elem1, Elem2, Elem3, Elem4, Elem5),
    maplist_(Tail1, Tail2, Tail3, Tail4, Tail5, Goal).


% From SWI Prolog
same_length([], []).
same_length([_|T1], [_|T2]) :-
    same_length(T1, T2).

% Append/2 (list of lists)
append(ListOfLists, List) :-
    % must_be(list, ListOfLists),
    append_(ListOfLists, List).

append_([], []).
append_([L|Ls], As) :-
    append(L, Ws, As),
    append_(Ls, Ws).


% From Clocksin & Mellish "Programming in Prolog Using the ISO Standard" 
% 5th edition, page 223

% phrase/2
phrase(P,L) :-
    Goal =.. [P,L,[]],
    call(Goal).

% phrase/3
phrase(P,P2,L) :-
    Goal =.. [P,P2,L,[]],
    call(Goal).
