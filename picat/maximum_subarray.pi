/* 

  Maximum subarray problem in Picat.

  http://www.rosettacode.org/wiki/Maximum_subarray
  """
  Given an array of integers, find a subarray which maximizes the sum of its elements, 
  that is, the elements of no other single subarray add up to a value larger than this one. 
  An empty subarray is considered to have the sum 0; thus if all elements are negative, 
  the result must be the empty sequence.
  ...
  a1 = [-1, -2, 3, 5, 6, -2, -1, 4, -4, 2, -1];
  Answer_ 
   Maximal subsequence: [3,5,6,-2,-1,4]
  (i.e. 3..8)

  auto a2 = [-1, -2, -3, -5, -6, -2, -1, -4, -4, -2, -1];
  answer: Maximal subsequence: []
  """

  This Picat model was created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/

import sat.
% import cp.


main => go.

go ?=>

  % totSum = 6
  % [1,2,3]
  % AA = [1, 2, 3, -100, 1, 5],

  % totSum = 15
  % [3,5,6,-2,-1,4]
  % AA = [-1, -2, 3, 5, 6, -2, -1, 4, -4, 2, -1],

  % Answer: []
  % AA = [-1, -2, -3, -5, -6, -2, -1, -4, -4, -2, -1],

  % _ = random2(),
  AA = [20 - random() mod 40 : _ in 1..100],
  println(aa=AA),

  N = AA.len,

  A = new_list(N),
  A :: min(AA)..max(AA),

  A = AA,
  
  % index of the sequence
  From :: 1..N,
  To :: 1..N,

  SSum = sum([abs(AA[I]) : I in 1..N]),
  println(ssum=SSum),
  TotSum :: -SSum..SSum,

  Status :: 0..1,

  % get the indices and sum the subsequence
  sum([From #= I #/\ To #= J #/\
      TotSum #= sum([A[K] : K in I..J])
     : I in 1..N, J in I+1..N]) #>= 1, 

  TotSum #> 0 #<=> Status #= 1,

  Vars =  A ++ [From,To,Status],
  solve($[max(TotSum),constr,updown],Vars),

  if Status == 1 then
    println(from=From),
    println(to=To),
    println(totSum=TotSum),
    println(A[From..To])
  else
    println([])
  end,

  nl.

go => true.

