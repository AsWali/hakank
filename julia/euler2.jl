#=
   Euler #2 in Julia.

  Problem 2
  """
  Each new term in the Fibonacci sequence is generated by adding the
  previous two terms. By starting with 1 and 2, the first 10 terms will be:

  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

  Find the sum of all the even-valued terms in the sequence which do not
  exceed four million.
  """

  This Julia program was created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Julia page: http://www.hakank.org/julia/
=#

using Memoization
include("Euler.jl")


# 7.5558e-5
function euler2a()
    n = 100 # some arbitrary large value
    f = zeros(BigInt,(n,1))
    f[1:2] = [0,1]
    [f[i] = f[i-1]+f[i-2] for i in 3:n]
    sum([f[i]*(f[i]%2 == 0 && f[i] < 4000000) for i in 1:n])
end


const fibmem2b = Dict{Int,Int}()
function fib2b(n::Int)
    get!(fibmem2b, n) do
        n < 3 ? 1 : fib2b(n-1) + fib2b(n-2)
    end
end

# 8.108e-6s
function euler2b()
    n = 1
    f = 0
    s = 0
    while f < 4_000_000
        f = fib2b(n)
        if f % 2 == 0
            s += f
        end
        n += 1
    end
    return s
end

#
# This is slower than using a Dict!
#
@memoize function fib2c(n::Int)
    n < 3 ? 1 : fib2c(n-1) + fib2c(n-2)
end

# 0.008s
function euler2c()
    n = 1
    s = 0
    while (f = fib2c(n)) < 4_000_000
        if f % 2 == 0
            s += f
        end
        n += 1
    end
    return s
end

# Using no cache
function fib_no_cache(n::Int)
  if n <= 2
     return 1
  end
  return fib_no_cache(n-1)+fib_no_cache(n-2)
end

# 0.0379s
function euler2d()
    n = 1
    s = 0
    while (f = fib_no_cache(n)) < 4_000_000
        if f % 2 == 0
            s += f
        end
        n += 1
    end
    return s
end

# run_euler(euler2a)
run_euler(euler2b)
# run_euler(euler2c)
# run_euler(euler2d)
