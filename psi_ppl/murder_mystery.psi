/*
  Murder mystery

  From
  Andy Gordpn:
  "Reverend Bayes, meet Countess Lovelace: Probabilistic Programming for Machine Learning"
  https://channel9.msdn.com/Events/Lang-NEXT/Lang-NEXT-2012/Reverend-Bayes-meet-Countess-Lovelace-Probabilistic-Programming-for-Machine-Learning
  Around @14:00

  """
  Miss Scarlett dunnit 30%. Col Mustard dunnit 70%.
  Scarlett uses gun 3%, uses pipe 97%.
  Mustard uses gun 80%, uses pipe 20%.

  We found a gun at the Scene.
  What is the probability that Scarlett dunnit?
  """

  In the video, the probabilities of Mustard is not explicit modelled.
  Here we model three slightly different interpretations of this problem.  
    
*/


//
// Explicitly state the probabilities of Mustard.
//

// observe withGun
// E[scarlett,mustard,withGun,withPipe] = (1707/5627,5600/5627,1,114619/562700)
// (0.303358805757953,0.995201706060068,1,0.203694686333748)

// observe withPipe
// E[scarlett,mustard,withGun,withPipe] = (1293/2273,1400/2273,114619/227300,1)
// (0.568851737791465,0.615926088869336,0.504263088429388,1)

// observe withGun < withPipe
// E[scarlett,mustard,withGun,withPipe] = (93081/112681,28000/112681,0,1)
// (0.826057631721408,0.248489097540845,0,1)
//
def test1() {
   scarlett := flip(0.30);
   mustard := flip(0.70);

   withGun := 0;
   withPipe := 0;
   if scarlett {
     withGun = flip(0.03);
     withPipe = flip(0.97);     
   }

   if mustard {
     withGun = flip(0.80);
     withPipe = flip(0.20);        
   }

   observe(withGun);
   // observe(withPipe);
   // observe(withGun < withPipe);

   return (scarlett,
           mustard,
           withGun,
           withPipe
           );
}


//
// In this variant we don't explicit connect probabilities to Mustard
//

// observe withGun
// E[r₁,r₂,r₃,r₄] = (9/569,7/10,1,12073/56900)
// (0.015817223198594,0.7,1,0.212179261862917)

// observe withPipe
// E[r₁,r₂,r₃,r₄] = (291/431,7/10,12073/43100,1)
// (0.675174013921114,0.7,0.280116009280742,1)
// 
def test2() {
   scarlett := flip(0.30);
   mustard := flip(0.70);

   withGun := 0;
   withPipe := 0;
   if scarlett {
     withGun = flip(0.03);
     withPipe = flip(0.97);     
   } else {
     withGun = flip(0.80);
     withPipe = flip(0.20);        
   }

   observe(withGun);
   // observe(withPipe);
   // observe(withGun < withPipe);

   return (scarlett,
           mustard,
           withGun,
           withPipe
           );
}

//
// In this version we skip Mustard altogether
//

// observe withGun
// E[r₁,r₂,r₃] = (9/569,1,12073/56900)
// (0.015817223198594,1,0.212179261862917)

// observe withPipe
// E[r₁,r₂,r₃] = (291/431,12073/43100,1)
// (0.675174013921114,0.280116009280742,1)
//
def test3() {
   scarlett := flip(0.30);
   // mustard := flip(0.70);

   withGun := 0;
   withPipe := 0;
   if scarlett {
     withGun = flip(0.03);
     withPipe = flip(0.97);     
   } else {
     withGun = flip(0.80);
     withPipe = flip(0.20);        
   }

   observe(withGun);
   // observe(withPipe);
   // observe(withGun < withPipe);

   return (scarlett,
           // mustard,
           withGun,
           withPipe
           );
}


def main() {
  // return test1();
  // return test2();
  return test3();  
}