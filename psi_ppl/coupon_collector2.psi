/*

  Coupon collecter's problem, or card collecter's problem.

  There are N different collecter's cards hidden in a package, but we don't
  know which card there is in the package we buy.
  We want to collect all of them, how many packages must one buy to collect
  all the different cards?

  This approach is different from coupon_collector.blog: Here we randomly
  select a value (0..N) to a slot and then sum how many items the slots
  has got.

  Very slow even for small n (e.g. n=3):
  E[counts₀,counts₁,counts₂] = (3/4,3/4,3/4)

  For --expectation and gen[i] = poisson(n) it don't return numbers.

*/

def countVal(a: ℝ[],len, val):ℝ {
   s := 0;
   i := 0;
   /*
   for i in [0..len-1){
     s += a[i];
   }
   */
   // while is only supported for --dp
   // but it crashes!
   while i < len {
     if a[i] = val {
       s += 1;
     }
   }
 
   return s;
}


def main() {
  n := 3;

  // Generate some numbers
  gen := array(n);
  for i in [0..n-1] {
     // gen[i] = poisson(n);
     gen[i] = uniformInt(0,3);     
  }

  counts := array(n);
  for i in [0..n-1] {
    c := 0;
    // counts[i] = countVal(gen,n,i); // don't work
    for j in [0..n-1] {
      if gen[j] = i {
        counts[i] += 1
      }
    }
  } 
  // How many different coupons did we got?
  // query size({i for Integer i: i>=0 & i < N & gener(i) > 0});

  return(counts[0],counts[1],counts[2]);
}

