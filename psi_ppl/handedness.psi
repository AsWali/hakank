/*
  Example Handedness from http://mlg.eng.cam.ac.uk/mlss09/material.htm
  (in the zip file http://mlg.eng.cam.ac.uk/mlss09/infernet.zip)
  """
  Answer key
  ----------
  with no data:
  probRightHanded = Beta(0.72,0.08)[mean=0.9]
  with studentData:
  probRightHanded = Beta(7.72,3.08)[mean=0.7148]
  drawnFromGeneral = Bernoulli(0.6955)
  with lecturerData:
  drawnFromGeneral = Bernoulli(0.8606)
  same or different:
  drawnFromSame = Bernoulli(0.7355)
  """

  Well, this is not at all the same as above.
  Infer.NET does different things than PSI...

  cf ~/blog/handedness.blog
  VARIABLE prob
  Mean: 0.715036545832515
  DATA (5 largest probabilities):
  0.7000147778143961: 0.0010335987892304524
  0.6997306763992245: 0.0010335970101616526
  0.7002890087293572: 0.0010335967383180078
  0.7003241675601664: 0.001033596207463303
  0.7003988332625875: 0.0010335948780446495


  VARIABLE probExpected
  Mean: 0.717327552046451
  DATA (5 largest probabilities):
  0.7444065114283388: 0.0010335987892304524
  0.761201412252514: 0.0010335970101616526
  0.9361239926752534: 0.0010335967383180078
  0.45821204071232197: 0.001033596207463303
  0.7258141798960163: 0.0010335948780446495


*/



// E[prob,beta1,beta2] = (1/210,2/35,24/35)
// (~0.00476190476190476190,~0.05714285714285714286,~0.68571428571428571429)
def main() {
  // Data about people: true=right, false=left
  studentData := [false, true, true, true, true, true, true, true, false, false];
  lecturerData := [false, true, true, true, true, true, true, true, true, true];
  len := studentData.length;
  
  beta1 := uniformInt(0,4);
  beta2 := uniformInt(0,4);  
  prob := beta(beta1,beta2);

  plainSum := 0;
  for i in [0..len) {
    plainSum += studentData[i];
  }
  plainProb := plainSum / len;  

  // The probabilistic program
  // -------------------------
  numStudents := len;
  student := array(numStudents);
  isRightHanded := array(numStudents);
  for s in [0..numStudents) {
    // isRightHanded[s] = flip(0.9);
    isRightHanded[s] = flip(prob);
    observe(isRightHanded[s] = student[s]);
  }

  // Inference queries about the program
  // -----------------------------------
  // InferenceEngine engine = new InferenceEngine();
  // Console.WriteLine("isRightHanded = {0}", engine.Infer(isRightHanded));

  return(prob,
         len,
         // plainProb,
         plainSum,
         beta1,
         beta2);

}