/*
  https://www.youtube.com/watch?v=5DnL_AONXZE
  "Incremental Precision-Preserving Symbolic Inference for Probabilistic Programs" 

  @2:19

  It look a lot like PSI but might be some other language, ISymb.
  https://pldi19.sigplan.org/details/pldi-2019-papers/74/Incremental-Precision-Preserving-Symbolic-Inference-for-Probabilistic-Programs

  Yes, the model is PSI (see @3:36).

*/


// E[isEffective_] = 77/137
// E[isEffective_,pC_,pT_,pA_] = (77/137,63/137,85/137,147/274)
// E[isEffective_,r1_,r2_,pC_,pT_,pA_] = (77/137,60/137,77/137,63/137,85/137,147/274)

def main() {
  control := [0,0,1,1,0]; // data
  treated := [1,0,1,1,1];

  isEffective := flip(0.5); // probabilistic assignment (flip a coin)
  pC := uniform(0,1);
  pT := uniform(0,1);
  pA := uniform(0,1);

  if isEffective {
    for i in [0..control.length-1] {
      observe(flip(pC) == control[i]); // constraint
    }
    for i in [0..treated.length-1] {
      observe(flip(pT) == treated[i]);
    }
  } else {
    for i in [0..control.length-1] {
      observe(flip(pA) == control[i]); // constraint
    }
    for i in [0..treated.length-1] {
      observe(flip(pA) == treated[i]);
    }
  
  }

  return (isEffective,
          isEffective == 0,
          isEffective == 1,          
          pC,pT,pA
         );
}