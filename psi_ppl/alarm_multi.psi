/*
   https://dtai.cs.kuleuven.be/problog/tutorial/basic/02_bayes.html
   """
   Since the random variables in the Bayesian network are all Boolean, we only need a single literal 
   in the head of the rules. We can extend the Bayesian network to have a multi-valued variable by 
   indicating the severity of the earthquake. The literal earthquake now has three possible values 
   none, mild, heavy instead of previously two (no or yes).
   """

   See ~/blog/alarm_multi.blog

*/

// 
// observe(calls[mary]) observe(calls[john])
// E[burglary,r₁,r₂,r₃] = (403207/460828,4/5,1/100,19/100)
/ E[burglary,r₁,r₂,r₃] = (403207/460828,4/5,19/100,1/100)
// (0.8749620248769606, 0.8, 0.19, 0.01)

// observe(calls[john] = false), observe(calls[mary] = false):
// E[burglary,r₁,r₂,r₃] = (10423/33692,4/5,19/100,1/100)
// (0.3093612727056868, 0.8, 0.19, 0.01)


def main() {
  // people
  john := 0;
  mary := 1;
 
  // type of earthquake
  none := 0;
  heavy := 1;
  mild := 2;
  earthquake_types := [none,mild,heavy];

  burglary := flip(0.7);

  earthquake := earthquake_types[categorical([0.8,0.19,0.01])];

  alarm := 0;
  if burglary && heavy {
    alarm = flip(0.9);
    
  } else if burglary && mild {
    alarm = flip(0.85);
    
  } else if burglary && none {
    alarm = flip(0.80);
    
  } else if !burglary && heavy {
    alarm = flip(0.30);
    
  } else if !burglary && mild {
    alarm = flip(0.10);
  } 

  calls := array(2);
  for p in [0..1] {
    if alarm {
      calls[p] = flip(0.8);
    } else {
      calls[p] = flip(0.01);    
    }
  }

  observe(calls[john]);
  observe(calls[mary]);  
  // observe(calls[john] = false);
  // observe(calls[mary] = false);  

  return(burglary,
         earthquake = none,
         earthquake = mild,
         earthquake = heavy
         );
}
