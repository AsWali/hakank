/*
  http://cplint.eu/example/inference/viral.swinb
  """
  Viral Marketing

  A firm is interested in marketing a new product to its customers. These are connected 
  in a social network that is known to the firm: the network represents the trust 
  relationships between customers. The firm has decided to adopt a marketing strategy 
  that involves giving the product for free to a number of its customers, in the hope 
  that these influence the other customers and entice them to buy the product. 
  The firm wants to choose the customers to which marketing is applied so that its 
  return is maximized. 
  This involves computing the probability that the non-marketed customers will 
  acquire the product given the ction to the marketed customers. 

  This viral marketing scenario is inspired by [1].

  We can model this domain with an LPAD where the predicate trust/2 encodes the links 
  between customers in the social network and predicate has/1 is true of customers that 
  possess the product, either received as a gift or bought. Predicate trust/2 is defined 
  by a number of certain facts, while predicate has/1 is defined by two rules, one 
  expressing the prior probability of a customer to buy the product and one expressing the 
  fact that if a trusted customer has the product, then there is a certain probability 
  that the trusting customer buys the product. 
  """

  Reference G. V. den Broeck, I. Thon, M. van Otterlo, L. D. Raedt,
  Dtproblog: A decision-theoretic probabilistic prolog, in: M. Fox, D. Poole (Eds.),
  24th AAAI Conference on Artificial Intelligence, AAAIâ€™10, Atlanta, Georgia, USA,
  July 11-15, 2010, AAAI Press, 2010, pp. 1217â€“1222.

  BLOG model ~/blog/viral_marketing.blog
  Distribution of values for has(p2)
     false   0.6857457704025404
     true    0.31425422959745697

  See cplint/prolog/exemples/viral.pl
  

*/

// no observe:
// E[has_p1,has_p2,has_p3,has_p4] = (1/10,13/100,157/1000,1651/10000)

// with --noboundscheck: 3.295s
// with --nocheck: 2.727s
// with --noboundscheck --nocheck: 2.737s
// with --nocheck --noboundscheck --dp: 0.068s
// with --dp: 0.07s
// neither --noboundscheck --nocheck  --dp: ?s
//
// observe(has[p2]):
// E[has_p1,has_p2,has_p3,has_p4] = (4/13,1,2/5,179/650)
// (0.3076923076923077, 1, 0.4, 0.2753846153846154)

//
// observe(has[p3]):
// [has_p1,has_p2,has_p3â‚ƒ,has_p4] = (40/157,52/157,1,2/5)
// (0.25477707006369427, 0.33121019108280253, 1, 0.4)
//
def main() {
  // people
  p1 := 0;
  p2 := 1;
  p3 := 2;
  p4 := 3;
  n := 4;

  // trusts := [[p2,p1],
  //            [p3,p1],
  //            [p3,p2],
  //            [p4,p1],
  //            [p4,p3]];
  trusts := [[0,0,0,0], // p1
             [1,0,0,0], // p2
             [1,1,0,0], // p3
             [1,0,1,0]  // p4
            ];

  has := array(4,false);
  for p in [0..n) {
    c := 0;
    for q in [0..n) {
      // if has[q] && trusts[p][q] {
      if trusts[p][q] && has[q] {      
        c += 1;
      }
    }
    if c > 0 {
      has[p] = flip(0.4);
    } else {
      has[p] = flip(0.1);
    }
  }

  // observe(has[p3]);
  observe(has[p2]);  

  return (has[p1],
          has[p2],
          has[p3],
          has[p4]
          );

}

