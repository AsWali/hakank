/*
  From the Hakuru example thermometer.hk
  https://hakaru-dev.github.io/workflow/continuous/
*/

// --mathematica
// p[m1_,m2_,noiseT_,noiseM_] := 1/60*1/Pi^2*1/noiseM*1/noiseT*Boole[-4+noiseM<=0]*Boole[-8+noiseT<=0]*Boole[-noiseM+1<=0]*Boole[-noiseT+3<=0]*E^(-1/2*1/noiseM*m1^2+-1/2*1/noiseM*m2^2+-1/noiseT*441/2)*Integrate[E^(-1/2*1/noiseM*xi1^2+-1/2*1/noiseT*xi1^2+1/noiseM*m2*xi1)*Integrate[E^(-1/2*1/noiseM*xi2^2+-1/noiseT*xi2^2+1/noiseM*m1*xi2+1/noiseT*21*xi2+1/noiseT*xi1*xi2),{xi2,-Infinity,Infinity}],{xi1,-Infinity,Infinity}]
//
// --expectation yields segmentation fault
//
def main() {
  noiseT := uniform(3,8);
  noiseM := uniform(1,4);
  
  // noiseT = real2prob(nT);
  // noiseM = real2prob(nM);
  
  t1 := gauss(21, noiseT);
  t2 := gauss(t1, noiseT);
  
  m1 := gauss(t1, noiseM);
  m2 := gauss(t2, noiseM);
  
  return (m1, m2, noiseT, noiseM);

}