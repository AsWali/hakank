/*
  http://cplint.eu/example/inference/dice.swinb

  """
  A six-sided die is repeatedly thrown until the outcome is six. on(T,F) 
  means that on the Tth throw the face F came out.
  """

  What is the probability that the die lands on face 1 at time 0?

  Cf ~/blog/dice_6_throws.blog

  Note: neither of these approaches seems to work correctly..


*/

// --dp is faster
// Here we implement the on version


// no observation
// E[a[0]=1,a[1]=1,a[2]=1,a.length] = (1/6,1/6,1/6,455/216)
// (0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 2.1064814814814814)

// observe(a[0] = 1)
// E[r₁,r₂,r₃,r₄] = (1,1/3,1/3,91/36)
// (1, 0.3333333333333333, 0.3333333333333333, 2.5277777777777777)

// observe(a[0] = 1), observe(a[1] = 1)
// E [r₁,r₂,r₃,r₄] = (1,1,2/3,7243/2592)
// This is not what I expect!

def test1() {
  target := 6;
  a := [];
  // We need a fix number for the for loop.
  nums := target; // 1+(target div 2);
  found := false;
  for i in [0..nums) {
     t := uniformInt(1,6);
     if !found && t != target {
       a ~= [t];
     }
     if t == target {
       found = true;
     }

  }

  // observe(found=true);
  observe(a[0] = 1);
  observe(a[1] = 1);  

  return(
        found == true,
        a[0] = 1,
        a[1] = 1,
        a[2] = 1,
        a.length
         );

}

// Using while: --dp
// Here we don't have any limit, just concatenations of
// an array.
// This don't seems to work. Or it's slow.

def test2() {

  target := 6;
  t := 0;
  a := [];
  while t != target {
     t = uniformInt(1,6);
     a ~= [t];
  }

  // observe(a[0] = 1);
  // observe(a[1] = 1);  

  return(
        // a[0] = 1,
        // a[1] = 1,
        // a[2] = 1,
        a.length
         );

}


def main() {
  return test1();
  // return test2();
}