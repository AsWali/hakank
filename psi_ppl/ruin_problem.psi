/*
  Ruin problem

  cf ~/blog/ruin_problem.blog
*/

// --expectation --nocheck --noboundscheck

// n=4, start=10, win=loose=1 (9s)
// E[draw₀,draw₁,draw₂,draw₃,amount₀,amount₁,amount₂,amount₃,ruin₀,ruin₁,ruin₂,ruin₃,first_time_ruined] = (0,3/2,3/2,3/2,10,5,5/2,11/8,0,1,1,1,3)
// (0,1.5,1.5,1.5,10,5,2.5,1.375,0,1,1,1,3)

// n=5, start=10, win=loose=1 (59s)
// E[draw₀,draw₁,draw₂,draw₃,draw₄,amount₀,amount₁,amount₂,amount₃,amount₄,ruin₀,ruin₁,ruin₂,ruin₃,ruin₄,first_time_ruined] = (0,3/2,3/2,3/2,3/2,10,5,5/2,11/8,7/8,0,1,1,1,1,4)
// (0,1.5,1.5,1.5,1.5,10,5,2.5,1.375,0.875,0,1,1,1,1,4)

// n=6,start=10,win=loose=1 (5min 3s)
// E[draw₀,draw₁,draw₂,draw₃,draw₄,draw₅,amount₀,amount₁,amount₂,amount₃,amount₄,amount₅,ruin₀,ruin₁,ruin₂,ruin₃,ruin₄,ruin₅,first_time_ruined] = (0,3/2,3/2,3/2,3/2,3/2,10,5,5/2,11/8,7/8,21/32,0,1,1,1,1,1,5)
// (0,1.5,1.5,1.5,1.5,1.5,10,5,2.5,1.375,0.875,0.65625,0,1,1,1,1,1,5)
def main() {

   // n := 4; // time
   // n := 5; // time
   n := 6; // time    

   null    := 0;
   head    := 1;
   tail    := 2;
   coins := [head,tail];

   start := 10;
   win   := 1;
   loose := 1;

   // What is the score at time t?
   // After ruin there's no way back at the game again.
   amount := array(n);

   // draw:
   // Draw a coin at timestep t:
   // Don't draw if ruined.
   draw   := array(n);
   
   // Is the player busted at time t?
   ruin   := array(n);

   // Was time t the first time the played got 0 (i.e. busted)?
   // random Boolean ruined_first_time(Timestep t) ~
   //   if ruin(t) & !exists Timestep s s > @0 & s < t & amount(s) == 0
   //   then true else false;
   first_time_ruined := uniformInt(0,n-1);

   amount[0] = start;
   for t in [1..n) {
     draw[t] = coins[categorical([1/2,1/2])];
    
     if amount[t] = 0 {
       ruin[t] = true;
       // first time ruined?       
       for s in [0..t) {
         no_prev := true;
         if ruin[s] = 1 {
           no_prev = false;
         }
         if no_prev {
           first_time_ruined = t;
         }
       }

     } else {
       ruin[t] = false;
     }
     
     if amount[t-1] = 0 {
       amount[t] = 0;
     }
     if draw[t] = head {
       amount[t] = amount[t] + win;
       
     } else if amount[t-1] < loose {
       amount[t] = 0;
       
     } else {
       amount[t] = amount[t-1] - loose;
     }

   }


   return(
          draw[0],
          draw[1],
          draw[2],
          draw[3],
          draw[4],
          draw[5],                   
          // draw[6],                   
          // draw[7],                   
         
          amount[0],
          amount[1],
          amount[2],
          amount[3],
          amount[4],         
          amount[5],         
          // amount[6],         
          // amount[7],         
         
          ruin[0],
          ruin[1],
          ruin[2],
          ruin[3],
          ruin[4],         
          ruin[5],         
          // ruin[6],         
          // ruin[7],         

          first_time_ruined
        );

}