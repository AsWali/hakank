/*

  Linear regression.

  See ~/stan/linear_regression.R
"""
#        mean se_mean   sd  2.5%   25%   50%   75% 97.5% n_eff Rhat
# alpha  4.03    0.00 0.13  3.79  3.95  4.03  4.12  4.28  1937    1
# beta   2.00    0.00 0.00  2.00  2.00  2.00  2.00  2.00  1975    1
# sigma  0.64    0.00 0.05  0.55  0.61  0.63  0.67  0.74  2179    1
# lp__  -4.85    0.03 1.20 -7.96 -5.42 -4.55 -3.96 -3.46  1594    1
"""

  See ~/blog/linear_regression.blog

  Even for just 5 data points, using --expectation segfaults.
  Without --expectation, it's not very slow 1.5s for 10 points.

  With the new-types brach this is quite fast.

  Using Mathematica's ProbabilityDistribution and Expectation:
    alpha:
    beta:
    sigma:

  See linear_regression2.psi for a version that's much faster and
  can handle --expectation!

  The big difference between these two models is that we here use
     alpha := gauss(2,2);
     beta := gauss(2,2);
     sigma := gauss(0,1);  
     cobserve(y[i], gauss(alpha + beta*(i+1),sigma));
     
  but in linear_regression2.psi its
     alpha = gauss(0,1000)
     beta = gauss(0,1000)
     sigma = gauss(0,1)
     cobserve(y[i],gauss(a* x[i] + b,1) + sigma);     

  i.e. here we put everything in a gauss term, but in linear_regression2.psi
    it's a more "traditional"(?) variant with a single error term (gauss(sigma,1))
 

*/

// ùîº[alpha,beta,sigma] = (2,2,1)
def main() {

  /* generated by R:
      n = 10
      x <- 1:n
      y <- 4+2*x+rnorm(n,0,0.6)
  */
  // This crash with --expectation
  // With new-type it's fast (but no plain numbers)
  y := [5.617247,7.567268,9.133846,11.969845,13.422352,16.637612, 7.386774,20.331703,22.000001,23.783700];
  // data := [5.617247, 7.567268, 9.133846];  
  len := y.length;


  alpha := gauss(2,2);
  beta := gauss(2,2);
  sigma := gamma(2,2);
  // sigma := gauss(0,1);

  // y := array(len);
  for i in [0..len-1] {
    // y[i] = gauss(alpha + beta*(i+1), sigma);
    // cobserve(y[i], data[i]);
    cobserve(y[i], gauss(alpha + beta*(i+1),sigma));
  }

  // return(alpha,beta,sigma);
  return(
     alpha,
     beta,
     sigma
     );

}