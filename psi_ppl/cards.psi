/*

  Second assignment of the CPLINT course:
  https://edu.swi-prolog.org/mod/assign/view.php?id=243
  """
  http://cplint.eu/p/cards.swinb
  Cards

  Suppose you have two decks of poker cards (52 cards, 4 suits, 13 ranks: A, K, Q, J, 10, 9, 8, 7, 6, 5, 4, 3, 2).

  Suppose you draw a card from the first deck and one from the second.

  Write a program to compute the probability that in this way you obtain one pair (two cards of the same rank).

  Can you do it with a single probabilistic clause?

  Add code to compute the probability that you draw at least one ace.
  """
  
  cf ~/cplint/cards.pl
     ~/blog/cards.blog

  Run with --nocheck --expectation

*/

// 𝔼[suit₀,rank₀,suit₁,rank₁,probPair,atLeastAnAce,exactlyAnAce,twoAces,kingOrQueenInSpades] = (5/2,7,5/2,7,1/13,25/169,24/169,1/169,51/676)
// [2.5,7,2.5,7,
// probPair: 0.076923076923077
// atLeastAnAce: 0.14792899408284
// exactlyAnAce: 0.142011834319527,
// twoAces: 0.005917159763314
// kingOrQuenInSpaces:0.075443786982249]
// 
def main() {

  // define the suits
  hearts := 1;
  spades := 2;
  clubs  := 3;
  diamonds := 4;

  // Define ranks
  ace := 1;
  king := 13;
  queen := 12;
  jack := 11;
  v10 := 10;
  v9 := 9;
  v8 := 8;
  v7 := 7;
  v6 := 6;
  v5 := 5;
  v4 := 4;
  v3 := 3;
  v2 := 2;

  // Note that what we have is two cards drawn from different decks!
  suit := array(2);
  rank := array(2);

  numCards := 2;
  for c in [0..numCards-1] {
    suit[c] = uniformInt(hearts,diamonds);
    rank[c] = uniformInt(ace,king);
  }

  // Probability of a pair
  probPair := rank[0] == rank[1];

  // At least an ace
  atLeastAnAce := rank[0] == ace || rank[1] == ace;

  // Exactly one ace
  exactlyAnAce := (rank[0] == ace) + (rank[1] == ace) == 1;

  // Two aces
  twoAces := (rank[0] == ace) + (rank[1] == ace) == 2;

  // A King or a Queen in spades
  // query size({c for Card c: rank(c) == king & suit(c) == spades}) > 0;
  // query (rank(card[0]) == king | rank(card[1]) == king) & (suit(card[0]) == spades | suit(card[1]) == spades) ;
  kingOrQueenInSpades := ((rank[0] == king || rank[0] == queen) && suit[0] == spades) || 
                         ((rank[1] == king || rank[1] == queen) && suit[1] == spades);

  return(suit[0],rank[0],suit[1],rank[1],probPair,atLeastAnAce,exactlyAnAce,twoAces,kingOrQueenInSpades);
  // rank[0] == rank[1] && suit[0] == suit[1]);

}