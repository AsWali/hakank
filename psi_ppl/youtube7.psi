/*
   https://www.youtube.com/watch?v=_MINtBZwxUM
   ACM CCS 2017 - Synthesis of Probablistic Privacy Enforcement - Timon Gehr

   @5:11

   This is not a runnable model since it lacks certain things...
   See psi_new_types/psi/genomicPrivacy.psi  which is runnable if the fancy N's are removed.
   

*/

// original program:
// rejected since it know too much about the patient
def query_rejected(patient: Patient[]) {
  numRed := 0;
  for i in [0..3]{
    for j in [0..2]{
      if patient[i].red[j]{
        numRed += 1;
      }
    }
  }
  return numRed;
}

// @7:18
def patient() : Patient {
  return Patient([flip(0.77),flip(0.77));
}

def child(a: Patient, b: Patient) : Patient {
  allele := shuffle([a.allele[flip(1/1)], b.allele(flip(1/2)]]);
}

def prior() {
  (alice,bob) := (patient(), patient());
  carol := child(alice,bob);
  patients := [alice,bob,carol];
  return patients;
}

def pick[a](x: a[]){
   return x[uniformInt(0,x.length-1)];
}

def query(patient: Patient[]) {
  numRed := 0;
  for i in [0..3]{
    for j in [0..2]{
      if patient[i].red[j]{
        numRed += 1;
      }
    }
  }
  /* 
  if numRed in [5..6] {
    return pick([5..6]);
  }
  */
  if numRed in [4,5,6] {
    return pick([4.5,6]);
  }
  
  return numRed;

}

def secret((i, patients: Patient[]) Â¥
  patient:= patients[i];
  return patient.allele[0] == RED && patient.allele[i] == RED;
}

// @ 8:58
def outputProb(o) {
  input := prior();
  output := query(input);
  return output == o;
}


def secretProb(i,o) {
  input := prior();
  output := query(input);
  observe(output == o);
  return secret(i,input);
}
