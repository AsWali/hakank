/*

  German tank problem

  See ~/stan/german_tank.py
"""
       mean se_mean     sd   2.5%    25%    50%    75%  97.5%  n_eff   Rhat
N    383.59    0.51  209.4 258.08 281.56 322.26 406.32  875.1 165440    1.0
lp__ -19.47  2.6e-3   0.82 -21.81 -19.67 -19.16 -18.95 -18.89  97227    1.0
"""

  See ~/blog/german_tank_int.blog
      ~/pymc3/german_tanks.py


  For data := [10,256,202,97]:
  The _exact_ result (yes, it is a division):
  18290298952530352360284984311544893247163897452153953188006114833632775008780401178113395423964722302632700632355764047806101834235792556164533450324442760510381102643955204773373085887797211569669176246741149430670654509482010810980104757417345310419057491579599220938594017669266893355570867745293622211320842107819160680243748469754789427033402104781083083862594669326049024719466519495407842771890963768328952281438535640540055252877221353732704873936803638835367051851173990319918234185496189755539422331363519801794668480321311179994890024246726156435090715445920589526121935535268384395426501303309578602903911345517355069422183739917249261179583220698503251456482659050681682943076704947844698296418641914060742913634605736311529989452419293640401464873611401509959984890779599750095367419292592184476438197020959274447849063553764590594800223043305122319142740646811973665920855984091177567848980730727155474045101671036059431872707879806314515881441805904391628184696141996080294605644973174841866445807340442762791921840344219912876038815989231422010222523521501850967296261790434954530040915801945354840287224495567938310336608832117890498947545532842411213914471141900334459223557940183874044580075164526784225844034204143437646250972611993702460032081211238669814245289883684332688298776462245128721747707028733093456246846780169559797689250535738084560435758307689113315079668525992038895117849357380174715643071975274607032257107606379598650605406763168365504812982868735117599855093396035454813983895179568191598677654068781730092051582792601068081855694789368195147106134487997589444495055754668619868696516400042106256371177098835427984679168714089493137712368045908863002236439398047788003987866499756957599/50157604104758879238386481785914155891436190429970966563110337442271347865025574463585063061178973565677840067868081916431940100547075631581841724355465405089190452568474791768014678830581007659552206154505910206893477701450202379879588392134701015975196846402470348456883204346790961620490060297548701722355107673010043400603165817896026179012269373621858763469227938643406005777070783819854700237833552635599493522527660633188648350378798060870502632154380036703768913506788542569350268070415838509314469951430179694640442170508321440201871668706207177516779725719331476319623168302122094984695090745763346085389443441197876239554509503676182324236659154634360973768288210372717172102292127033012957601858798214956176176343197256158897548575399715151398094186090756890031089668262534186716458146143004458851621527682933041718021423479309437021373114699708868925657656255290717194830029178771582088808477592465541299730607235720593308143133801632570906900541323207264650911001122837850098068170296499197859840322732687822173875317300599282311395514397771301822000218361634842790191657622979163225038159080398557289442874816392622071272967177014681318003052054319812979154422953189080453605837604899040650486409214367815238526747426029198098210216108575118137084951135794298096015917288301637014436860595906069832874245325262329545313101066072146416047067638714391542335514493131826467569637986209279294286380225228693403434891405045745631624165298394252543062960661874108841490362300186738574201836374046898378910264920472665930060011226282373374188310196123283535075320351159680413614290259043493712974179611131016062903024743316527529356203207111819020486050309795103156262851742146474349550197003766225536408703210402401

   which is
   n = ~364.65655166322021085998
   It took 1min5s.

   With n := uniformInt(0,1000) (no lower limit)
   n = ~364.65655166322021085998
   I.e. exactly the same as above.
   It took 57.3s
   I guees that PSI is smart enough to reason about the lower limit,
   i.e. that n must be >= 256.
   

   With [10,256,202]: 
   n = ~407.40279824389729701137
   This took 43.79s

   new-types version is much slower!

*/


def main() {

  // Tank id observed:  y = [10,256,202,97,12,53,123]
  // data := [10,256,202,97]; // observed tank ids. n =  ~364.65655166322021085998
  // data := [10,256,202]; // observed tank ids. n = ~407.40279824389729701137
  data := [10];
  
  // This is the Problem from Mosteller's "Fifty Challenging
  // Problems in Probability with Solutions":
  // """
  // A railroad numbers its locomotives in order 1..N. One day you
  // see a locomotive with the number 60. Estimate how many loco-
  // motives the railroad has.'
  // """
  // data := [60]; // observed tank ids. n = ~334.28118893851975401916
  
  len := data.length;

  // How many tanks are there?

  // Let's first identify the minimum number (maxval)
  // Note: This is not needed.
  // maxval := 0;
  // for i in [0..len-1] {
  //   if data[i] > maxval {
  //     maxval = data[i];
  //   }
  // }
  
  // We know that n is >= maxval
  // n := uniformInt(maxval,1000);
  // n := uniformInt(maxval,500);  
  
  n := uniformInt(0,1000);
  
  y := array(len);
  for i in [0..len) {
    y[i] = uniformInt(0,n);
    // observe(y[i] = data[i]);

    // Note: Using this approach (i.e. without observe/1)
    // is not correct: It does not trigger an "observed event".
    // data[i] = uniformInt(0,n);
  }

  // moving the observations outside the main loop
  for i in [0..len) {
    observe(y[i] = data[i]);
  }

  return(n);

}