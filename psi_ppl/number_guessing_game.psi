/*
  https://social.microsoft.com/Forums/en-US/a76a904d-ae2e-4118-bec0-c928772d7ff7/solving-the-nested-number-guessing-problem-from-anglican-web-site?forum=infer.net
  """
  I'm trying to express with Infer.NET one of the examples in the Anglican web site:
     http://www.robots.ox.ac.uk/~fwood/anglican/examples/viewer/?worksheet=nested-number-guessing

  Here the description of the problems:
    "Two agents play a game in which each agent needs to name a number between 0 and 9 and they win
     if their numbers add up to 13. The first player knows this, and he knows that the second player
     gets to see the number the first player chooses, but the second player mistakenly thinks that
     the two win if their numbers add up to any number greater than 8 (and the first player knows
     this as well). What number should the first player choose?
    "
  """ 

  This Church model http://forestdb.org/models/nested-guessing.html
  """
  (define (sample)
  (rejection-query
   (define a (sample-integer 10))
   (define b
     (rejection-query
      (define c (sample-integer 10))
      c
      (> (+ a c) 8)))
   a
   (= (+ a b) 13)))

  (hist (repeat 10000 sample))
  """
  give the following answer, i.e. that player a should play number 4:
       4        23.5%
       5        18.5%
       6        19%
       7        15%
       8        12%
       9        12.5%


  Reference:
  Andreas Stuhlmüller and Noah D. Goodman: 
  "Reasoning about Reasoning by Nested Conditioning: Modeling Theory of Mind with Probabilistic Programs"
  (2013). Cognitive Systems Research.

*/

// E[r1_,r2_,r3_,r4_,r5_,r6_,b_] = (504/2131,420/2131,360/2131,315/2131,280/2131,252/2131,14714/2131)
// (0.236508681370249,0.197090567808541,0.16893477240732,0.147817925856405,0.13139371187236,0.118254340685124,6.90473955889254)
def main() {
  a := uniformInt(0,9);
  // player a thinks that they win if a+b > 8 (this is a mistake)
  bb := infer((){
          c := uniformInt(0,9);
          observe(a + c > 8);
          return c;
       }); //  :Distribution[ℝ];
  b := sample(bb);

  observe( a + b = 13); // player b knows that it's the sum of 13 that's the goal

  return(
         // a=0,
         // a=1,
         // a=2,
         // a=3,
         a=4,
         a=5,
         a=6,
         a=7,
         a=8,
         a=9,
         b,
         // c,
         )


}