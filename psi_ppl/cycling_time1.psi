/*
   CyclingTime1 Example from
   "Infer.NET 101 A sample-based introduction to the basics of 
   Microsoft Infer.NET programming", page 12ff.
   """
   averageTimePosterior: Gaussian(15.29, 1.559)
   trafficNoisePosterior: Gamma(1.458, 0.3944)[mean=0.5751]
   ...
   Tomorrows predicted time: 15.29 plus or minus 2.66
   ...
   Probability that the trip takes less than 18 min: 0.85
   """

*/

// --expectation --mathematica
// psi (master) segmentation fault (core dumped)
// psi-new-types:
// E[averageTime_,trafficNoise_,tomorrowsTime,probTripTakesLongerThan18Minutes_] = (1/Integrate[1/xi1^(1/2)*Boole[-xi1<=0]*Boole[xi1!=0]*E^(-1/xi1*357+-2*xi1)*Integrate[E^(-1/200*xi2^2+-1/xi1*xi2^2*3/2+1/xi1*46*xi2+3/20*xi2),{xi2,-Infinity,Infinity}],{xi1,-Infinity,Infinity}]*Integrate[E^(-1/200*xi1^2+3/20*xi1)*Integrate[1/xi2^(1/2)*Boole[-xi2<=0]*Boole[xi2!=0]*E^(-1/xi2*357+-1/xi2*xi1^2*3/2+-2*xi2+1/xi2*46*xi1),{xi2,-Infinity,Infinity}]*xi1,{xi1,-Infinity,Infinity}],1/Integrate[1/xi1^(1/2)*Boole[-xi1<=0]*Boole[xi1!=0]*E^(-1/xi1*357+-2*xi1)*Integrate[E^(-1/200*xi2^2+-1/xi1*xi2^2*3/2+1/xi1*46*xi2+3/20*xi2),{xi2,-Infinity,Infinity}],{xi1,-Infinity,Infinity}]*Integrate[E^(-1/200*xi1^2+3/20*xi1)*Integrate[Boole[-xi2<=0]*Boole[xi2!=0]*E^(-1/xi2*357+-1/xi2*xi1^2*3/2+-2*xi2+1/xi2*46*xi1)*xi2^(1/2),{xi2,-Infinity,Infinity}],{xi1,-Infinity,Infinity}],1/2^(1/2)*1/Integrate[1/xi1^(1/2)*Boole[-xi1<=0]*Boole[xi1!=0]*E^(-1/xi1*357+-2*xi1)*Integrate[E^(-1/200*xi2^2+-1/xi1*xi2^2*3/2+1/xi1*46*xi2+3/20*xi2),{xi2,-Infinity,Infinity}],{xi1,-Infinity,Infinity}]*1/Pi^(1/2)*Integrate[E^(-1/200*xi1^2+3/20*xi1)*Integrate[1/xi2*Boole[-xi2<=0]*Boole[xi2!=0]*E^(-1/xi2*357+-1/xi2*xi1^2*2+-2*xi2+1/xi2*46*xi1)*Integrate[E^(-1/2*1/xi2*xi3^2+1/xi2*xi1*xi3)*xi3,{xi3,-Infinity,Infinity}],{xi2,-Infinity,Infinity}],{xi1,-Infinity,Infinity}],1/Integrate[1/xi1^(1/2)*Boole[-xi1<=0]*Boole[xi1!=0]*E^(-1/xi1*357+-2*xi1)*Integrate[E^(-1/200*xi2^2+-1/xi1*xi2^2*3/2+1/xi1*46*xi2+3/20*xi2),{xi2,-Infinity,Infinity}],{xi1,-Infinity,Infinity}]*1/Pi^(1/2)*Integrate[E^(-1/200*xi1^2+3/20*xi1)*Integrate[1/xi2^(1/2)*Boole[-xi2<=0]*Boole[xi2!=0]*E^(-1/xi2*357+-1/xi2*xi1^2*3/2+-2*xi2+1/xi2*46*xi1)*Sqrt[Pi]*(Erf[-1/2^(1/2)*1/xi2^(1/2)*xi1+1/2^(1/2)*1/xi2^(1/2)*18]+1)/2,{xi2,-Infinity,Infinity}],{xi1,-Infinity,Infinity}])
// {15.00651052982656, 1.751287451729787, <mathematica don't evaluate this with N>,<mathematica don't evaluate this N>}

def main() {

  //[1] The model
  // Variable<double> averageTime = Variable.GaussianFromMeanAndPrecision(15, 0.01);
  // averageTime := gauss(15,1/0.01); // mean and precision (i.e. 1/variance)
  averageTime := gauss(15,100.0);  // explicit
  // averageTime := gauss(15,0.01);    

  // Variable<double> trafficNoise = Variable.GammaFromShapeAndScale(2.0, 0.5);
  // trafficNoise := gamma(2.0,0.5);
  // trafficNoise := gamma(2.0,1/0.5); // shape and scale (i.e. 1/rate)
  trafficNoise := gamma(2.0,2.0); // make it explicit
  
  // Variable<double> travelTimeMonday =
  // Variable.GaussianFromMeanAndPrecision(averageTime, trafficNoise);
  travelTimeMonday := gauss(averageTime,trafficNoise);

  // Variable<double> travelTimeTuesday =
  // Variable.GaussianFromMeanAndPrecision(averageTime, trafficNoise);
  travelTimeTuesday := gauss(averageTime,trafficNoise);

// Variable<double> travelTimeWednesday =
// Variable.GaussianFromMeanAndPrecision(averageTime, trafficNoise);
  travelTimeWednesday := gauss(averageTime,trafficNoise);

// //[2] Train the model
// travelTimeMonday.ObservedValue = 13;
   cobserve(travelTimeMonday,13.0);
// travelTimeTuesday.ObservedValue = 17;
   cobserve(travelTimeTuesday,17.0);
// travelTimeWednesday.ObservedValue = 16;
   cobserve(travelTimeWednesday,16.0);
// InferenceEngine engine = new InferenceEngine();
// Gaussian averageTimePosterior = engine.Infer<Gaussian>(averageTime);
          
// Gamma trafficNoisePosterior = engine.Infer<Gamma>(trafficNoise);
// Console.WriteLine("averageTimePosterior: " + averageTimePosterior);
// Console.WriteLine("trafficNoisePosterior: " + trafficNoisePosterior);

// //[3] Make predictions
// //Add a prediction variable and retrain the model
// Variable<double> tomorrowsTime =
// Variable.GaussianFromMeanAndPrecision(averageTime, trafficNoise);
   tomorrowsTime := gauss(averageTime,trafficNoise);
   
// Gaussian tomorrowsTimeDist = engine.Infer<Gaussian>(tomorrowsTime);
// double tomorrowsMean = tomorrowsTimeDist.GetMean();
// double tomorrowsStdDev = Math.Sqrt(tomorrowsTimeDist.GetVariance());
// // Write out the results.
// Console.WriteLine("Tomorrows predicted time: {0:f2} plus or minus {1:f2}",tomorrowsMean, tomorrowsStdDev);
// // Ask other questions of the model
// double probTripTakesLongerThan18Minutes = engine.Infer<Bernoulli>(tomorrowsTime <18.0).GetProbTrue();
  probTripTakesLongerThan18Minutes := tomorrowsTime < 18.0;
// Console.WriteLine("Probability that the trip takes less than 18 min: {0:f2}",
// probTripTakesLongerThan18Minutes);

   return(
          // averageTime,
          // trafficNoise,
          tomorrowsTime,
          // probTripTakesLongerThan18Minutes
          );


}
