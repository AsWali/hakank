/*
  Gaussian mixture model.

  See ~/blog/gaussian_mixture_model.blog
  
*/

// Quite large expressions
def main() {
  data := [0.2, 1.0, 0.5, 0.6];
  n := data.length;
  
  p := beta(0.5, 1);

  // z[4] is prediction
  z := array(n);
  for i in [0..n) {
    z[i] = flip(p);
  }

  a := uniform(-1,1);
  b := uniform(-1,1);

  x := array(n);
  for i in [0..n) {
    if z[i] = 1 {
      x[i] = gauss(a, 1.0);
    } else {
      x[i] = gauss(b, 1.0);
    }
    if i <= n {
      cobserve(x[i],data[i]);
    }
  }

  // query 0.1*round(10*x(5));
  // query x(5);
  // query round(min({a, b}) * 10.0) / 10.0;
  // query min({a, b});
  // query a > b;
  return(// x[4], // note: add + 1 to the arrays
         a,
         // b,
         // p,
         // a > b
         );
}