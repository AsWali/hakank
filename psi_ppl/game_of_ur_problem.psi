/*

   https://www.allendowney.com/blog/2018/10/21/the-game-of-ur-problem/
   """
   Here’s a probability puzzle to ruin your week.

   In the Royal Game of Ur, players advance tokens along a track with 14 spaces. 
   To determine how many spaces to advance, a player rolls 4 dice with 4 sides. Two corners 
   on each die are marked; the other two are not. The total number of marked corners — 
   which is 0, 1, 2, 3, or 4 — is the number of spaces to advance.

   For example, if the total on your first roll is 2, you could advance a token to space 2. 
   If you roll a 3 on the next roll, you could advance the same token to space 5.

   Suppose you have a token on space 13. How many rolls did it take to get there?
   """

   See:
   https://www.allendowney.com/blog/lions-and-tigers-and-bears/

   Allen Downey's solution:
   http://nbviewer.jupyter.org/github/AllenDowney/ThinkBayes2/blob/master/solutions/game_of_ur_soln.ipynb?flush=true

*/

// Cannot use a random variable as array length / loop variable
/*
def test1() {

    numRolls := uniformInt(3,20);
    // error: array length should be provably deterministic integer
    roll := array(numRolls);
    s := 0;
    // error: for bounds should be provably deterministic integers
    for i in [0..numRolls) {
      roll[i] = uniformInt(0,4);
      s += roll[i];
    }

    observe(s = 13);

    return(numRolls);

}
*/

// use --dp for while
// takes a very long time (> 5min)
def test2() {
  a := [];
  s := 0;
  while s < 13 {
    t := uniformInt(0,4);
    a ~= [t];
    s += t;
  }
  observe(s = 13);
  
  return a.length;
}


// with observe(s = 13):
// (n)
// maxN=6
// E[r] = 16461/3106
// ~5.29974243399871216999

// maxN=8
// E[r] = 40017/6506
// ~6.15078389179219182293
// 
// maxN=10
// E[r] = 111835/17021
// ~6.57041301921156218789

//
// without observe(s = 13)
//  (n, s=13)
//
// maxN = 6
// E[r₁,r₂] = (17888/3125,3106/15625)
// (5.72416, 0.198784)
//
// maxN = 8
// E[r₁,r₂] = (103552/15625,26024/78125)
// (6.627328, 0.3331072)
//
// maxN = 10
// E[r₁,r₂] = (540628/78125,748924/1953125)
// (6.9200384,0.383449088)
//
// 
def test3() {
   maxN := 6;
   roll := array(maxN);
   s := 0;
   n := 0;
   for i in [0..maxN) {
     if s < 13 {
       roll[i] = uniformInt(0,4);
       s += roll[i];
       n += 1;
     }
   }
   
   observe(s = 13);

   return(
          n
          , s = 13,
          );

}


def main() {
  return test2();
  // return test3();
}