/*
  From webppl example/linear_regression.wppl
  """
var xs = [0, 1, 2, 3]
var ys = [0, 1, 4, 6]

var model = function() {
  var m = gaussian(0, 2)
  var b = gaussian(0, 2)
  var sigma = gamma(1, 1)

  var f = function(x) {
    return m * x + b
  }

  map2(
      function(x, y) {
        factor(Gaussian({mu: f(x), sigma: sigma}).score(y))
      },
      xs,
      ys)

  return f(4)
}

Infer({model, method: 'MCMC', samples: 10000})
"""

*/

// with noise gauss(0,0.1)
// E[m,b,sigma,y4,y5] = (5780/2787,-2980/8361,1,66380/8361,83720/8361)
// (2.07391460351633,-0.356416696567396,1,7.93924171749791,10.0131563210142)

// with noise gauss(0,0,001)
// E[m,b,sigma,y4,y5] = (56018000/26678667,-31978000/80036001,1,640238000/80036001,808292000/80036001)
// (2.09973009521053,-0.399545199665835,1,7.99937518117628,10.0991052763868)
//
// with noise(0,00001)
// E[m,b,sigma,y4,y5] = (560001800000/266667866667,-319997800000/800003600001,1,6400023800000/800003600001,8080029200000/800003600001)
// (2.09999730000952,-0.399995450019975,1,7.99999375001812,10.0999910500277)

def main() {
  xs := [0, 1, 2, 3];
  ys := [0, 1, 4, 6];
  n := xs.length;

  m := gauss(0, 2);
  b := gauss(0, 2);
  sigma := gamma(1, 1);

  y := array(n);
  for i in [0..n) {
    // Note: One have to add some small noise, otherwise it's Pr[error] = 1!
    // y[i] = m * xs[i] + b; // + gauss(0,0.00001);
    y[i] = m * xs[i] + b + gauss(0,0.001);
    // y[i] = m * xs[i] + b + gauss(0,0.00001);
    // y[i] = m * xs[i] + b + gauss(0,0.1);    
    cobserve(y[i],ys[i]);
  }

  // Prediction
  y4 := m * 4 + b;
  y5 := m * 5 + b;  

  return(
         m,
         b,
         sigma,
         y4,
         y5
         );

}