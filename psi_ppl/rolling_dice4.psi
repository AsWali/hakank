/*
  https://dtai.cs.kuleuven.be/problog/tutorial/basic/03_dice.html
  """
  Let’s consider an infinite number of dice, which we roll one after the other until we see a 
  six for the first time. What is the probability of stopping after n dice? The first die is always rolled, 
  those with higher numbers D are only rolled if the previous roll did not stop the process.
  """

  cf ~/blog/rolling_dice4.blog

  ~/psi/dice_6_throws.psi

*/

// 
// E[r₁,r₂,r₃,r₄,r₅,r₆,r₇,r₈,r₉,r₁₀,r₁₁,r₁₂,r₁₃,r₁₄] = (15625/46656,1/5,1/6,1/6,5/36,5/36,25/216,25/216,125/1296,125/1296,625/7776,625/7776,3125/46656,3125/46656)
// (0.33489797668038407,
//  0.2,
//  0.16666666666666666,
//  0.16666666666666666,
//  0.1388888888888889,
//  0.1388888888888889,
//  0.11574074074074074,
//  0.11574074074074074,
//  0.09645061728395062,
//  0.09645061728395062,
//  0.08037551440329219,
//  0.08037551440329219,
//  0.06697959533607682,
//  0.06697959533607682)
// 
// The only difference is for found = 0 since this models just check
// a limited number of cases.

//
// Closed form for this problem
//
def closed_form(n) {
  return (1/6) * ((5/6)^(n-1));

}

def test1() {
  target := 6;
  n := 7;
  a := array(n);
  found := 0;
  for i in [0..n) {
     t := uniformInt(1,6);    
     a[i] = t;
     if found = 0 && t = target {
       found = i;
     }
  }

  return(
        found = 0,
        closed_form(0),        
        found = 1,
        closed_form(1),        
        found = 2,
        closed_form(2),        
        found = 3,
        closed_form(3),        
        found = 4,
        closed_form(4),        
        found = 5,
        closed_form(5),        
        found = 6,
        closed_form(6)
        );

}

//
// Now we observe that it's a sequence of length 2 or more.
//
// E[r₁,r₂,r₃,r₄,r₅,r₆,r₇] = (0,0,0,216/671,180/671,150/671,125/671)
// (0, 0, 0, 0.32190760059612517, 0.26825633383010433, 0.22354694485842028, 0.18628912071535023)
//
def test2() {
  target := 6;
  n := 7;
  a := array(n);
  found := 0;
  for i in [0..n) {
     t := uniformInt(1,6);    
     a[i] = t;
     if found = 0 && t = target {
       found = i;
     }
  }

  observe(found > 2);

  return(
        found = 0,
        found = 1,
        found = 2,
        found = 3,
        found = 4,
        found = 5,
        found = 6,
        );

}


def main() {
  // return test1();
  return test2();
}