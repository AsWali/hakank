/+
   From http:  reasoning.eas.asu.edu/lpmln/examples/lpmln2al/taxi.lpmln
  """
  Conside a program where you know that you are going to be Late 
  if you don't get a Taxi.

  Since we have put a hard constraint that we cannot be late the probability of being 
  Late is going to be 0. The probability of there being a NoTaxi comes out to be 71 %. 
  {NoTaxi = T, Late = F} satisfies the second soft rule and the hard constraint. Hence 
  the probability for this model comes out to be e\textsuperscript{2}/(
  e\textsuperscript{2} + e\textsuperscript{1}) which comes out to be 73\%
  \begin{lstlisting}
  Late 4.9995e-05
  NoTaxi 0.711979
  \end{lstlisting}
  """

  Note: Since lpmln use weights instead of probability, I don't know how to get the no_taxi as 0.71
  Hmm in the lpmln there's an example where the weights are corresponding to percentages:
     0.5 -> -1.6094
     0.8 -> -0.2231
  which is ln(0.5) and ln(0.8)

  But this don't help us here, since the weights are positive, 1 and 2....


  Cf ~/cplint/taxi.pl
     ~/blog/taxi.blog

  BLOG model:


// You are going to be late if you don't get a taxi
// Our belief in this rule is denoted by the weight at the start
// lpmln: 1 Late <= NoTaxi Note: "1" is the weight, the degree of confidence in this rule.
// 0.65::late :- no_taxi.
Random Boolean late ~ if no_taxi then BooleanDistrib(0.65);

// There is a chance for a taxi to be not available
// t(_):: no_taxi.
// lpmln: 2 NoTaxi Note: "2" is the weight of this
// 0.3::no_taxi.
Random Boolean no_taxi ~ BooleanDistrib(0.3);


// But you certainly cannot be late no matter what situation
// Hence this constraint is encoded as a hard rule
obs late = false;

query no_taxi;


+/

// No observe:
// 𝔼[no_taxi,late] = (3/10,39/200)  

// observe(late=0)
// 𝔼[no_taxi,late] = (3/23,0) : (~0.13043478260869565217,0)

// observe(late=1)
// 𝔼[no_taxi,late] = (1,1)

// observe(no_taxi=0)
// 𝔼[no_taxi,late] = (1,1)

// observe(no_taxi=1)
// 𝔼[no_taxi,late] = (1,13/20) : (1,0.65

def main() {

  no_taxi := bernoulli(0.3);

  late := 0;
  if no_taxi {
    late = bernoulli(0.65);
  }

  observe(late==0);
  // observe(late==1);
  // observe(no_taxi=0);
  // observe(no_taxi=1);

  return (no_taxi,late);
}