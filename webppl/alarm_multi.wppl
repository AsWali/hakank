/*
   https://dtai.cs.kuleuven.be/problog/tutorial/basic/02_bayes.html
   """
   Since the random variables in the Bayesian network are all Boolean, we only need a single literal 
   in the head of the rules. We can extend the Bayesian network to have a multi-valued variable by 
   indicating the severity of the earthquake. The literal earthquake now has three possible values 
   none, mild, heavy instead of previously two (no or yes).
   """

   Cf ~/blog/alarm_multi.blog
      ~/psi/alarm_multi.psi

*/


/*
person(john).
person(mary).

0.7::burglary.
0.01::earthquake(heavy); 0.19::earthquake(mild); 0.8::earthquake(none).

0.90::alarm :-   burglary, earthquake(heavy).
0.85::alarm :-   burglary, earthquake(mild).
0.80::alarm :-   burglary, earthquake(none).
0.10::alarm :- \+burglary, earthquake(mild).
0.30::alarm :- \+burglary, earthquake(heavy).

0.8::calls(X) :- alarm, person(X).
0.1::calls(X) :- \+alarm, person(X).

evidence(calls(john),true).
evidence(calls(mary),true).

query(burglary).
query(earthquake(_)).
*/


var model = function() {
    
    var burglary = flip(0.7);
    var earthquake = categorical({ps:[0.01,0.19,0.8], vs:["heavy", "mild","none"]});
    
    var alarm =
        (burglary && earthquake == "heavy") ? flip(0.9) :
        (burglary && earthquake == "mild") ? flip(0.85) :
        (burglary && earthquake == "none") ? flip(0.80) : 
        (!burglary && earthquake == "heavy") ? flip(0.30) :
        (!burglary && earthquake == "mild") ? flip(0.10) : false;
    
    var calls = mem(function(p) {
        if (alarm) {
            return flip(0.8)
        } else {
            return flip(0.01);
        }
    });
    
    condition(calls("john") == true);
    condition(calls("mary") == true);
    
    return {
        callsJohn:calls("john"),
        callsMary:calls("mary"),
        alarm:alarm,
        burglary:burglary,
        earthquake:earthquake
    };


}


var d = Infer(model);
// var d = Infer({method:"rejection",sample:10000},model);
// display(d);

var exp_map = function(d,arr) {
    display("Marginals:");
    map(function(a) {display(a);display(marginalize(d, a)) }, arr);
    display("expectation:");
    display(map(function(a) { [a,expectation(marginalize(d, a))] }, arr));
    display("MAP:");
    display(map(function(a) { [a,MAP(marginalize(d, a))] }, arr));
}

exp_map(d,["callsJohn","callsMary","alarm","burglary","earthquake"]);
