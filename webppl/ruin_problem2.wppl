/*
   Ruin problem.

   Cf ruin_problem.wppl

   Compared to ruin_problem.wppl this version 
   use a recursive approach with arrays instead.

   The arrays always ends with a 0 (ruin).
   Note: We have to have an maxLen since otherwise the sequence goes to 
   infinity...
   


*/

var model = function() {

    var maxLen = 50;
    var coins = ["head", "tail"]; // , "neither"];
    var start = 1; // >= 1
    var win = 1;
    var loose = 1;
   
    var draw1 = function(arr) {
        if (arr.length == 0) {
            return  draw1([start]);
        } else if (last(arr) == 0 || arr.length >= maxLen) {
        // } else if (last(arr) == 0) {            
            return arr;
        } else {
            var lastVal = last(arr);
            var c = uniformDraw(coins);
            if (c == "head") {
                return draw1(arr.concat(lastVal+win));
            } else {
                if (lastVal - loose <= 0) {
                    return arr.concat(0);
                } else {
                    return draw1(arr.concat(lastVal-loose));
                }
            }
                
            
        }
    }

    var draw = mem(function(arr) { return draw1(arr);});
    
    var a = draw([]);
    var len = a.length;
    
    // condition(len == 6);
    // condition(last(a)==8);
    
    return {
        a:a,
        len:len,
        ruin:last(a)==0
    }
}

var d = Infer(model);
// var d = Infer({method:"enumerate",maxExecutions:10000},model);
// var d = Infer({method:"enumerate",strategy:"breadthFirst",maxExecutions:10000},model);
// var d = Infer({method:"rejection",samples:10000},model);
// var d = Infer({method:"SMC",particles:1000},model);
// var d = Infer({method:"MCMC",kernel:"MH",samples:1000},model);
// display(d);

var exp_map = function(d,arr) {
    display("Marginals:");
    map(function(a) {display(a);display(marginalize(d, a)) }, arr);
    display("expectation:");
    display(map(function(a) { [a,expectation(marginalize(d, a))] }, arr));
    display("MAP:");
    display(map(function(a) { [a,MAP(marginalize(d, a))] }, arr));
}

exp_map(d,["a","len","ruin"]);
