/*
   N-queens problem in WebPPL

   This model use the standard formulation of the n-queens problem.

   * Using method:enumerate (i.e. exact solutions) for different Ns
   
     N    #sols  time
     --------------------------
     2    0      -
     3    0      -
     4    2      1.06s
     5   10      1.15s       
     6    4      2.1s
     7   40      21.2s
     8   92      >8min

     Well, using probabilistic programming for this problem is 
     not the best choice. :-) :-)
     
   * Using method:"rejection"
     N    #sols  time
     --------------------------
     2    0      -
     3    0      -
     4    2      1.4s
     5   10      2.1s
     6    4     45.3s 
     7   40      
     8   92      


*/

var all_different = function(a,n) {
    mapN(function(i) {
        sum(mapN(
            function(j) {
                if (i != j) {
                    condition(a(i) != a(j))
                }
            },
            i)
           )
    },n);

}

var model = function() {
    var n = 4;

    var queen = mem(function(i) {
        return randomInteger(n);
    })

    var queens = mapN(function(i) { return queen(i) },n);

    // all_different(queen,n);

    // Note: It seems that one have to use separate
    //       runs of these, i.e. they can not be
    //       combined into
    //              condition(queen(i) != queen(j) &&
    //                        queen(i)+i != queen(j)+j &&
    //                        queen(i)+i != queen(j)+j
    //                        )
    // Different rows
    mapN(function(i) {
        sum(mapN(
            function(j) {
                condition(queen(i) != queen(j)) 
             },
             i)
            )
    },n);
    // different diagonals1
    mapN(function(i) {
        sum(mapN(
            function(j) {
                condition(queen(i)+i != queen(j)+j)
             },
             i)
            )
    },n);
    
    // different diagonals2
    mapN(function(i) {
        sum(mapN(
            function(j) {
                condition(queen(i)-i != queen(j)-j)
             },
             i)
            )
    },n);
    
    return {
        queens:queens,
    }

}

// var d = Infer({method:"enumerate"},model);
// var d = Infer({method:"rejection"},model);
// var d = Infer({method:"MCMC",kernel:"MH",samples:10000,verbose:true},model);
var d = Infer({method:"SMC",particles:10000},model);
// var d = Infer(model);
// display(d);


var exp_map = function(d,arr) {
    display("Marginals:");
    map(function(a) {display(a);display(marginalize(d, a)) }, arr);
    display("expectation:");
    display(map(function(a) { [a,expectation(marginalize(d, a))] }, arr));
    display("MAP:");
    display(map(function(a) { [a,MAP(marginalize(d, a))] }, arr));
}

exp_map(d,["queens"]);
var m = marginalize(d, "queens");
console.log("#solutions",m.supp.length)
