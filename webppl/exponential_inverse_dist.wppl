/*
   Generating Inverse Exponential distribution

   From Handbook on probability distributions
   page 60ff

*/

// From Handbook on probability distributions
// page 60
// """
// The algorithm is simply to inverse an exponential variate of parameter
// 1/lambda, i.e. (−lambda log(U))−1 for an uniform variable U.
// """
var inverse_exponential = function(lambda,t) {
    var u = uniform(0,1);
    return -lambda*Math.log(u);
}


var model = function() {
    var lambda = 1/4;
    
    var g = inverse_exponential(lambda);
    var g2 = exponential(1/lambda); 

    return {
        g:g,
        g2:g2,
    }
}


var d = Infer({method:"MCMC",kernel:"MH",samples:10000,lag:100,burn:1000},model);
// var d = Infer(model);
// display(d);

var exp_map = function(d,arr) {
    display("Marginals:");
    map(function(a) {display(a);display(marginalize(d, a)) }, arr);
    display("expectation:");
    display(map(function(a) { [a,expectation(marginalize(d, a))] }, arr));
    display("MAP:");
    display(map(function(a) { [a,MAP(marginalize(d, a))] }, arr));
}

// exp_map(d,["g2"]);

var stat = function(v) {
    console.log("Stat for v:",v);
    var m = marginalize(d, v);
    var s = m.supp;
    var mean = listMean(s);
    var stdev = listStdev(s,mean);
    console.log("min:",_.min(s),"mean:",mean,"max:",_.max(s),"stdev:",stdev);
    
}

console.log("inverse_exponential(1/4)");
stat("g");
console.log("exponential(4)");
stat("g2");
