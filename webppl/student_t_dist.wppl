/*
   Generating Student t distribution

   From Handbook on probability distributions
   page 84ff

*/

// See chi_square_dist.wppl
var chi_squared_dist = function(k) {
    var x = sum(mapN(function(i) { return Math.pow(gaussian(0,1),2)},k));
    return x;
}

// From Handbook on probability distributions
// page 85
// """
// The algorithm is simply
// * generate a standard normal distribution N
// * generate a chi-squared distribution C
// * return sqrt(d)*N/sqrt(C)
// """
var student_t_dist = function(d) {
    var N = gaussian(0,1);
    var C = chi_squared_dist(d);
    
    return Math.sqrt(d)*N/Math.sqrt(C);
}



var model = function() {
    var d = 4;
    var g = student_t_dist(d);

    return {
        g:g,

    }
}


var d = Infer({method:"MCMC",kernel:"MH",samples:1000,lag:100,burn:1000},model);
// var d = Infer(model);
// display(d);

var exp_map = function(d,arr) {
    display("Marginals:");
    map(function(a) {display(a);display(marginalize(d, a)) }, arr);
    display("expectation:");
    display(map(function(a) { [a,expectation(marginalize(d, a))] }, arr));
    display("MAP:");
    display(map(function(a) { [a,MAP(marginalize(d, a))] }, arr));
}

exp_map(d,["g"]);

var stat = function(v) {
    console.log("\nv:",v);
    var m = marginalize(d, v);
    var s = m.supp;
    var mean = listMean(s);
    var stdev = listStdev(s,mean);
    console.log("\nmin:",_.min(s),"mean:",mean,"max:",_.max(s),"stdev:",stdev);
    
}

stat("g");


