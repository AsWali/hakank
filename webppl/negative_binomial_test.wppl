/*

  Test of negative binomial.

  From BLOG documentation:
  """
  NegativeBinomial distribution generates the number of failures until the rth success 
  in a sequence of independent Bernoulli trials each with probability of success p.

  Example: The following code defines a random function symbol x distributed according to a
  Negative Binomial distribution with probability of success p = 0.8 and number of failures r = 2.
  random Integer x ~ NegativeBinomial(2, 0.8);
  """


  https://stattrek.com/probability-distributions/negative-binomial.aspx
  """
  Bob is a high school basketball player. He is a 70% free throw shooter. That means his probability 
  of making a free throw is 0.70. During the season, what is the probability that Bob makes his 
  third free throw on his fifth shot?

  Solution: This is an example of a negative binomial experiment. The probability of success (P) 
  is 0.70, the number of trials (x) is 5, and the number of successes (r) is 3.

  To solve this problem, we enter these values into the negative binomial formula.
  
  b*(x; r, P) = x-1Cr-1 * Pr * Qx - r
  b*(5; 3, 0.7) = 4C2 * 0.73 * 0.32
  b*(5; 3, 0.7) = 6 * 0.343 * 0.09 = 0.18522
  
  Thus, the probability that Bob will make his third successful free throw on his fifth shot is 0.18522.
  """

  Note that webppl don't have negative binomial so we have to roll our own.

  See ~/blog/negative_binomial_test.blog

*/

// n: number of failures
// p: probability of success
var negative_binomial = function(n,p) {
    return negative_binomial_tmp(n, p, 0, 0);
};

// helper function
var negative_binomial_tmp = function(n, p, s, f) {
    if (s == n) {
        return f;
    } else {
        return flip(p) ? negative_binomial_tmp(n,p,s+1,f) :  negative_binomial_tmp(n,p,s,f+1);
    }
    
};


var model = function() {

    var y = negative_binomial(3,0.7);    
    
    return {y:y,
            y2:y==2
           };

}


/* 
Using enumerate (maxExecutions:1000) give a quite good estimation
Marginal:
    {"y":0} : 0.34300003421219116
    {"y":1} : 0.30870003079097214
    {"y":2} : 0.1852200184745833     <----
    {"y":3} : 0.09261000923729168
    {"y":4} : 0.041674504156781235
    {"y":5} : 0.017503291745848113
    {"y":6} : 0.0070013166983392385
    {"y":7} : 0.002700507869359422
    {"y":8} : 0.0010126904510097835
    {"y":9} : 0.00037131983203692205
    {"y":10} : 0.00013367513953329164
    {"y":11} : 0.00004739391310725809
    {"y":12} : 0.000016587869587540314
    {"y":13} : 0.000005741954857225509
    {"y":14} : 0.0000019686702367630216
    {"y":15} : 6.693478804994313e-7
    {"y":16} : 2.2590490966855739e-7
    {"y":17} : 1.3731474901422107e-8
*/

var d = Infer({method:"enumerate",maxExecutions:1000},model);


/*
Using MCMC/MH 100000 samples:
Iteration: 99999 | Acceptance ratio: 0.9345
Marginal:
    {"y":0} : 0.34568
    {"y":1} : 0.31082
    {"y":2} : 0.1833
    {"y":3} : 0.08941
    {"y":4} : 0.04183
    {"y":5} : 0.01789
    {"y":6} : 0.00685
    {"y":7} : 0.00239
    {"y":8} : 0.00126
    {"y":9} : 0.00039
    {"y":10} : 0.0001
    {"y":11} : 0.00005
    {"y":12} : 0.00003

*/
// var d = Infer({method:"MCMC",kernel:"MH",samples:100000,verbose:true},model);
display(d);


var exp_map = function(d,arr) {
    display("Marginals:");
    map(function(a) {display(a);display(marginalize(d, a)) }, arr);
    display("expectation:");
    display(map(function(a) { [a,expectation(marginalize(d, a))] }, arr));
    display("MAP:");
    display(map(function(a) { [a,MAP(marginalize(d, a))] }, arr));
}

exp_map(d,["y","y2"]);
