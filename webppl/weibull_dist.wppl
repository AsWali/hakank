/*
   Generating Weibull distribution

   From Handbook on probability distributions
   page 69ff

*/

// From Handbook on probability distributions
// page 79
// """
// Using the inversion function method, we simply need to compute
// beta(−log(1−U))^1/eta) for the first parametrization or
// (−log(1−U)/t)^(1/eta) for the second one where U is an
// uniform variate.
// """
var weibull = function(eta,beta) {
    var u = uniform(0,1);
    var x = beta*Math.pow(-Math.log(1-u),1/eta)
    
    return x;
}


var model = function() {
     
    var g = weibull(4,3);

    return {
        g:g,
    }
}


var d = Infer({method:"MCMC",kernel:"MH",samples:10000,lag:100,burn:1000},model);
// var d = Infer(model);
// display(d);

var exp_map = function(d,arr) {
    display("Marginals:");
    map(function(a) {display(a);display(marginalize(d, a)) }, arr);
    display("expectation:");
    display(map(function(a) { [a,expectation(marginalize(d, a))] }, arr));
    display("MAP:");
    display(map(function(a) { [a,MAP(marginalize(d, a))] }, arr));
}

exp_map(d,["g"]);

var stat = function(v) {
    console.log("\nv:",v);
    var m = marginalize(d, v);
    var s = m.supp;
    var mean = listMean(s);
    var stdev = listStdev(s,mean);
    console.log("\nmin:",_.min(s),"mean:",mean,"max:",_.max(s),"stdev:",stdev);
    
}

stat("g");
