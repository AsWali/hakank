/*
   Generating Geometric distribution

   From Handbook on probability distributions
   page 19

*/

// From Handbook on probability distributions
// page 19
// Expectation: (1-p)/p
// """
// A basic algorithm is to use i.i.d. Bernoulli variables as follows:
// * initialize X to 0 and generate U from an uniform distribution,
// * while U > p do ; generate U from an uniform distribution; X = X + 1;
// * return X.
// """
var geometric1 = function(p,x) {
    var u = uniform(0,1);
    return u > p ? geometric1(p,x+1) : x;

}

var geometric = function(p) {
    return geometric1(p,0);
}

var model = function() {
    var p = 0.9;

    var g = geometric(p);

    return {
        g:g
    }
}


var d = Infer({method:"MCMC",kernel:"MH",samples:100000},model);
// var d = Infer(model);
// display(d);

var exp_map = function(d,arr) {
    display("Marginals:");
    map(function(a) {display(a);display(marginalize(d, a)) }, arr);
    display("expectation:");
    display(map(function(a) { [a,expectation(marginalize(d, a))] }, arr));
    display("MAP:");
    display(map(function(a) { [a,MAP(marginalize(d, a))] }, arr));
}

exp_map(d,["g"]);


var stat = function(v) {
    console.log("Stat for v:",v);
    var m = marginalize(d, v);
    var s = m.supp;
    var mean = listMean(s);
    var stdev = listStdev(s,mean);
    console.log("min:",_.min(s),"mean:",mean,"max:",_.max(s),"stdev:",stdev);
    
}

stat("g");

