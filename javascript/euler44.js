/* 

  Euler #44 in JavaScript.

  Problem 44:
  """  
  Pentagonal numbers are generated by the formula, P(n)=n(3n−1)/2. 
  The first ten pentagonal numbers are:

  1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

  It can be seen that P(4) + P(7) = 22 + 70 = 92 = P(8). However, 
  their difference,  70 − 22 = 48, is not pentagonal.

  Find the pair of pentagonal numbers, P(j) and P(k), for which their sum 
  and difference is pentagonal and D = |P(k) − P(j)| is minimised; what 
  is the value of D?  
  """

  This JavaScript program was created by Hakan Kjellerstrand, hakank@gmail.com
  See also my JavaScript page: http://www.hakank.org/javascript_progs/

*/

'use strict';
const {range2,timing2} = require('./js_utils.js');

// 68ms
const euler44a = function() {
    const s = range2(1,2500).map(n=>Math.floor(n*(3*n-1) / 2));
    let t = new Set(s);
    let d = 10_000_000;
    loop:
    for(let j of s) {
        for(let k of s) {
            const a = j+k;
            const b = Math.abs(j-k);
            if (j < k &&
                a < d &&
                t.has(a) &&
                b < d &&
                t.has(b)) {
                d = b;
                break loop;
            }
        }
    }
    
    return d;
}

// Slightly faster
const euler44b = function() {
    const n = 2500;
    const s = range2(1,n).map(n=>Math.floor(n*(3*n-1) / 2));
    let t = new Set(s);
    let d = 10_000_000;
    loop:
    for(let j = 0; j < n; j++) {
        for(let k = 0; k < n; k++) {
            if (s[j] >= s[k]) {
                continue;
            }
            const a = s[j]+s[k];
            if (a >= d ) {
                continue;
            }
            const b = Math.abs(s[j]-s[k]);
            if (b >= d) {
                continue;
            }
            if (t.has(a) && t.has(b)) {
                d = b;
                break loop;
            }
        }
    }
    
    return d;
}

// timing2(euler44a); // 51ms
timing2(euler44b); // 51ms


