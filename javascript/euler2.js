/* 

  Euler #2 in JavaScript.

  Problem 2
  """
  Each new term in the Fibonacci sequence is generated by adding the 
  previous two terms. By starting with 1 and 2, the first 10 terms will be:

  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

  Find the sum of all the even-valued terms in the sequence which do not 
  exceed four million.
  """

  This JavaScript program was created by Hakan Kjellerstrand, hakank@gmail.com
  See also my JavaScript page: http://www.hakank.org/javascript_progs/

*/
'use strict';

const {fib,sum,sum2,range,last,butLast,timing2} = require('./js_utils.js');

// Imperative: 0ms
const euler2a = function () {
    const limit = 4000000;
    let i = 1;
    let f = fib(i);
    let s = 0;
    while (f <= limit) {
        if (f % 2 == 0) {
            s += f;
        }
        i++;
        f = fib(i);
    }
    return(s);
}

// Mostly functional: 0ms
const euler2b = function() {
    const limit = 4000000;
    return sum(
        range(40)
            .map(i=>fib(i))
            .filter(i=>i<=limit && i % 2 === 0)
    );    
}

var euler2c = function() {
    const limit = 4000000;
    let a = [1,1];
    while (last(a) <= limit) {
        a.push(last(a)+butLast(a));
    }
    // return sum(a.filter(i=>i % 2 === 0));
    return a.filter(i=>i % 2 === 0).sum2();
}

var euler2d = function() {
    let f = 0;
    let s = 0;
    let i = 1;
    while (f <= 4000000) {
        s += (f = fib(i++)) % 2 == 0 ? f : 0;
    }
    return s;
}

timing2(euler2a);
// timing2(euler2b);
// timing2(euler2c);
// timing2(euler2d);
